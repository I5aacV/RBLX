-- ========================================================================
-- ROOM MANAGER LOADER - ServerScript
-- Place this in ServerScriptService/Core/RoomManagerLoader
-- ========================================================================

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- Wait for and load the RoomManager module
local RoomManager = require(ReplicatedStorage.Modules.RoomManager)

-- Create global instance
local roomManagerInstance = RoomManager.new()
_G.RoomManager = roomManagerInstance

-- ========================================================================
-- INTEGRATION WITH EXISTING SYSTEMS
-- ========================================================================

-- Connect to player room entry (existing RemoteEvent)
local roomEnterEvent = ReplicatedStorage:WaitForChild("PlayerEnteredRoom", 10)
if roomEnterEvent then
	-- In your RoomManagerLoader.lua, UPDATE the existing connection:
	roomEnterEvent.OnServerEvent:Connect(function(player, roomID)
		local roomData = roomManagerInstance:onPlayerEnteredRoom(roomID)
		if roomData then
			print("üéÆ Player", player.Name, "entered room:", roomID)

			-- NEW: Trigger door re-evaluation when player enters room
			if _G.SharedDoorManager then
				_G.SharedDoorManager:onPlayerEnteredRoom(roomData.model)
			end
		end
	end)
	print("üîó Connected to PlayerEnteredRoom event")
else
	warn("‚ùå PlayerEnteredRoom RemoteEvent not found!")
end

-- ========================================================================
-- CALLBACK REGISTRATIONS
-- ========================================================================

-- Register with BossRewardSystem (if it exists)
spawn(function()
	local attempts = 0
	while not _G.BossRewardManager and attempts < 50 do
		task.wait(0.1)
		attempts = attempts + 1
	end

	if _G.BossRewardManager then
		roomManagerInstance:onRoomCleared(function(roomData)
			if roomData.roomType == "Boss" then
				print("üëë Boss room cleared, notifying BossRewardSystem")
				-- BossRewardSystem will handle this via its existing hook
			end
		end)
		print("üîó Connected to BossRewardSystem")
	else
		print("‚ö†Ô∏è BossRewardManager not found - boss rewards may not work")
	end
end)

-- Register with ItemEffects (if it exists)
spawn(function()
	local attempts = 0
	while not _G.ItemEffects and attempts < 50 do
		task.wait(0.1)
		attempts = attempts + 1
	end

	if _G.ItemEffects then
		roomManagerInstance:onRoomCleared(function(roomData)
			-- Charge active items for all players when room clears
			for _, player in pairs(Players:GetPlayers()) do
				_G.ItemEffects:OnRoomCleared(player)
			end
		end)
		print("üîó Connected to ItemEffects")
	else
		print("‚ö†Ô∏è ItemEffects not found - active item charging may not work")
	end
end)

-- ========================================================================
-- DUNGEON GENERATOR INTEGRATION
-- ========================================================================

-- Auto-register rooms created by DungeonGenerator
spawn(function()
	local attempts = 0
	while not _G.DungeonGenerator and attempts < 50 do
		task.wait(0.1)
		attempts = attempts + 1
	end

	if _G.DungeonGenerator and _G.DungeonGenerator.rooms then
		print("üèóÔ∏è Auto-registering rooms from DungeonGenerator...")

		for _, dungeonRoomData in pairs(_G.DungeonGenerator.rooms) do
			roomManagerInstance:registerRoom(
				dungeonRoomData.model,
				dungeonRoomData.roomType,
				dungeonRoomData.connections,
				dungeonRoomData.gridX,
				dungeonRoomData.gridY
			)
		end

		print("‚úÖ Registered", roomManagerInstance:getTotalRoomCount(), "rooms from DungeonGenerator")
	else
		print("‚ö†Ô∏è DungeonGenerator not found - rooms must be registered manually")
	end
end)

-- Wait for SharedDoorManager and verify integration
spawn(function()
	local attempts = 0
	while not _G.SharedDoorManager and attempts < 50 do
		task.wait(0.1)
		attempts = attempts + 1
	end

	if _G.SharedDoorManager then
		print("üîó RoomManager connected to SharedDoorManager")

		-- Verify the door manager has enemy integration functions
		if _G.SharedDoorManager.onEnemiesSpawned and _G.SharedDoorManager.onEnemiesCleared then
			print("‚úÖ Door-Enemy integration: Complete")
		else
			warn("‚ö†Ô∏è SharedDoorManager missing enemy integration functions!")
			print("üí° Update SharedDoorManager with enemy integration code")
		end

	else
		warn("‚ö†Ô∏è SharedDoorManager not found - door control disabled")
		print("üí° Make sure SharedDoorManager script is running")
	end
end)

-- ========================================================================
-- DEBUG COMMANDS
-- ========================================================================

-- Global debug functions
_G.DebugRooms = function()
	roomManagerInstance:debugPrint()
end

_G.GetRoomState = function(roomID)
	local state = roomManagerInstance:getRoomState(roomID)
	print("üè† Room", roomID, "state:", state)
	return state
end

_G.ClearAllRooms = function()
	print("üßπ Force clearing all active rooms...")
	local activeRooms = roomManagerInstance:getActiveRooms()
	for _, roomData in pairs(activeRooms) do
		roomManagerInstance:onRoomCleared(roomData)
	end
	print("‚úÖ All rooms cleared")
end

_G.ListAllRooms = function()
	print("üìã ALL REGISTERED ROOMS:")
	local allRooms = roomManagerInstance:getAllRooms()
	for roomID, roomData in pairs(allRooms) do
		local state = roomManagerInstance:getRoomState(roomID)
		local enemyCount = roomManagerInstance:getEnemyCount(roomData)
		print("üè†", roomID, "| Type:", roomData.roomType, "| State:", state, "| Enemies:", enemyCount)
	end
end



-- ========================================================================
-- INITIALIZATION COMPLETE
-- ========================================================================

print("‚úÖ RoomManager system loaded and available globally!")
print("üè† Room state centralization active")
print("üîó Integration with existing systems started")
print("")
print("üîß Debug Commands:")
print("  _G.DebugRooms() - Show room status")
print("  _G.GetRoomState('roomID') - Check specific room")
print("  _G.ClearAllRooms() - Force clear all rooms")
print("  _G.ListAllRooms() - List all registered rooms")
print("")
print("üéØ RoomManager ready to coordinate room state!")
