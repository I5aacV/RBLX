-- ========================================================================
-- BOSS SYSTEM INTEGRATION SCRIPT
-- Place this in ServerScriptService/Systems/BossIntegration
-- This connects the new boss system with your existing scripts
-- ========================================================================

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- ========================================================================
-- INTEGRATION CONFIGURATION
-- ========================================================================

local INTEGRATION_CONFIG = {
	-- Boss to area mapping
	BOSS_AREAS = {
		["BASEMENT_KEEPER"] = "Basement",
		["MAYOR_BRIMSTONE"] = "TerrorTown", 
		["MEMORY_DEVOURER"] = "MemoryAbyss",
		["DEMON_LORD"] = "HeartOfDespair"
	},

	-- Boss spawn requirements
	BOSS_SPAWN_CONDITIONS = {
		["BASEMENT_KEEPER"] = {
			requiredLevel = 1,
			requiredProgress = 0
		},
		["MAYOR_BRIMSTONE"] = {
			requiredLevel = 5,
			requiredProgress = 25
		},
		["MEMORY_DEVOURER"] = {
			requiredLevel = 10,
			requiredProgress = 50
		},
		["DEMON_LORD"] = {
			requiredLevel = 15,
			requiredProgress = 75
		}
	}
}

-- ========================================================================
-- BOSS INTEGRATION MANAGER
-- ========================================================================

local BossIntegration = {}
BossIntegration.__index = BossIntegration

function BossIntegration.new()
	local self = setmetatable({}, BossIntegration)
	self.activeBossRooms = {}
	self.bossSpawnPoints = {}

	-- Wait for other systems to load
	self:waitForSystems()
	self:initializeIntegration()

	return self
end

function BossIntegration:waitForSystems()
	print("üîó Waiting for game systems to load...")

	-- Wait for essential systems
	repeat
		task.wait(1)
	until _G.BossAI and workspace:FindFirstChild("Rooms")

	print("‚úÖ Essential systems loaded, initializing boss integration")
end

function BossIntegration:initializeIntegration()
	print("üîó Initializing Boss System Integration...")

	-- Hook into existing systems
	self:hookRoomGeneration()
	self:hookBossRewards()
	self:hookProgressionSystem()
	self:hookDoorSystem()
	self:setupBossRoomDetection()

	print("‚úÖ Boss Integration initialized successfully")
end

-- ========================================================================
-- ROOM GENERATION INTEGRATION
-- ========================================================================

function BossIntegration:hookRoomGeneration()
	print("üèóÔ∏è Hooking into room generation system...")

	-- Override the boss room creation
	if _G.RoomManager then
		local originalCreateRoom = _G.RoomManager.createRoom

		_G.RoomManager.createRoom = function(self, roomType, position, ...)
			local room = originalCreateRoom(self, roomType, position, ...)

			-- Check if this is a boss room
			if room and self:isBossRoom(roomType) then
				BossIntegration:setupBossRoom(room, roomType)
			end

			return room
		end

		print("‚úÖ Room generation hooked successfully")
	else
		warn("‚ùå RoomManager not found - boss rooms won't auto-spawn")
	end
end

function BossIntegration:setupBossRoom(room, roomType)
	print("üëë Setting up boss room:", roomType)

	-- Determine which boss should spawn in this room
	local bossType = self:getBossTypeForRoom(roomType)
	if not bossType then
		warn("‚ùå No boss type found for room:", roomType)
		return
	end

	-- Find or create boss spawn point
	local spawnPoint = self:findBossSpawnPoint(room)
	if not spawnPoint then
		spawnPoint = self:createBossSpawnPoint(room)
	end

	-- Store boss room data
	self.activeBossRooms[room] = {
		bossType = bossType,
		spawnPoint = spawnPoint,
		isSpawned = false,
		room = room
	}

	-- Set up boss spawning trigger
	self:setupBossSpawnTrigger(room, bossType, spawnPoint)
end

function BossIntegration:getBossTypeForRoom(roomType)
	-- Map room types to boss types
	local roomToBossMap = {
		["BasementBoss"] = "BASEMENT_KEEPER",
		["TerrorTownBoss"] = "MAYOR_BRIMSTONE", 
		["MemoryAbyssBoss"] = "MEMORY_DEVOURER",
		["FinalBoss"] = "DEMON_LORD",

		-- Alternative naming patterns
		["BASEMENT_BOSS"] = "BASEMENT_KEEPER",
		["TERRORTOWN_BOSS"] = "MAYOR_BRIMSTONE",
		["MEMORY_BOSS"] = "MEMORY_DEVOURER",
		["FINAL_BOSS"] = "DEMON_LORD"
	}

	return roomToBossMap[roomType]
end

function BossIntegration:findBossSpawnPoint(room)
	-- Look for existing spawn points
	for _, child in pairs(room:GetDescendants()) do
		if child.Name == "BossSpawn" or child.Name == "BossSpawnPoint" then
			return child
		end
	end
	return nil
end

function BossIntegration:createBossSpawnPoint(room)
	-- Create a spawn point in the center of the room
	local roomSize = self:getRoomSize(room)
	local roomCenter = self:getRoomCenter(room)

	local spawnPoint = Instance.new("Part")
	spawnPoint.Name = "BossSpawn"
	spawnPoint.Size = Vector3.new(2, 2, 2)
	spawnPoint.Position = roomCenter + Vector3.new(0, 5, 0) -- Slightly elevated
	spawnPoint.Anchored = true
	spawnPoint.CanCollide = false
	spawnPoint.Transparency = 1 -- Invisible
	spawnPoint.Parent = room

	print("‚úÖ Created boss spawn point at:", spawnPoint.Position)
	return spawnPoint
end

function BossIntegration:setupBossSpawnTrigger(room, bossType, spawnPoint)
	-- Create a trigger zone that spawns the boss when player enters
	local trigger = Instance.new("Part")
	trigger.Name = "BossTrigger"
	trigger.Size = Vector3.new(20, 10, 20) -- Large trigger area
	trigger.Position = spawnPoint.Position
	trigger.Anchored = true
	trigger.CanCollide = false
	trigger.Transparency = 1
	trigger.Parent = room

	-- Set up touch detection
	local triggered = false
	trigger.Touched:Connect(function(hit)
		if triggered then return end

		local player = Players:GetPlayerFromCharacter(hit.Parent)
		if player then
			triggered = true
			print("üéØ Boss trigger activated by:", player.Name)
			self:triggerBossSpawn(room, bossType, spawnPoint.Position, player)
		end
	end)

	print("‚úÖ Boss trigger set up for:", bossType)
end

function BossIntegration:triggerBossSpawn(room, bossType, position, player)
	-- Check if player meets requirements
	if not self:checkBossSpawnRequirements(player, bossType) then
		print("‚ùå Player doesn't meet requirements for:", bossType)
		return
	end

	-- Check if boss is already spawned in this room
	local roomData = self.activeBossRooms[room]
	if roomData and roomData.isSpawned then
		print("‚ö†Ô∏è Boss already spawned in this room")
		return
	end

	print("üåü Spawning boss:", bossType, "at:", position)

	-- Spawn the boss using the boss AI system
	local boss = _G.BossAI:spawnBoss(bossType, position)

	if boss then
		-- Mark as spawned
		if roomData then
			roomData.isSpawned = true
			roomData.bossInstance = boss
		end

		-- Trigger boss entrance events
		self:triggerBossEntrance(boss, bossType, player)

		-- Set up boss death monitoring
		self:monitorBossDefeat(boss, room, bossType)
	else
		warn("‚ùå Failed to spawn boss:", bossType)
	end
end

function BossIntegration:checkBossSpawnRequirements(player, bossType)
	local requirements = INTEGRATION_CONFIG.BOSS_SPAWN_CONDITIONS[bossType]
	if not requirements then return true end

	-- Check player level (if you have a level system)
	if _G.PlayerData then
		local playerData = _G.PlayerData:getPlayerData(player)
		if playerData and playerData.level < requirements.requiredLevel then
			return false
		end
	end

	-- Check progression (if you have a progression system)
	if _G.ProgressionManager then
		local progress = _G.ProgressionManager:getPlayerProgress(player)
		if progress < requirements.requiredProgress then
			return false
		end
	end

	return true
end

-- ========================================================================
-- BOSS REWARDS INTEGRATION
-- ========================================================================

function BossIntegration:hookBossRewards()
	print("üéÅ Hooking into boss rewards system...")

	-- Override the boss AI's victory handler
	if _G.BossAI then
		local originalVictoryHandler = _G.BossAI.handleBossVictory

		_G.BossAI.handleBossVictory = function(self, bossData)
			-- Call original handler
			if originalVictoryHandler then
				originalVictoryHandler(self, bossData)
			end

			-- Call integrated victory handler
			BossIntegration:onBossVictory(bossData)
		end

		print("‚úÖ Boss rewards integration hooked")
	end
end

function BossIntegration:onBossVictory(bossData)
	local bossType = bossData.bossType
	local bossName = bossData.config.name

	print("üèÜ Boss victory integration for:", bossName)

	-- Find all players in the boss room
	local players = self:getPlayersInBossRoom(bossData.boss)

	for _, player in pairs(players) do
		-- Give boss-specific rewards
		self:giveBossRewards(player, bossType, bossName)

		-- Update progression
		self:updateBossProgression(player, bossType)

		-- Unlock next areas
		self:unlockNextAreas(player, bossType)
	end

	-- Handle room-specific victory effects
	self:handleRoomVictoryEffects(bossData.boss, bossType)
end

function BossIntegration:giveBossRewards(player, bossType, bossName)
	-- Call existing boss reward system
	if _G.BossRewards then
		_G.BossRewards:awardBossReward(player, bossType)
		print("‚úÖ Boss rewards given to", player.Name, "for defeating", bossName)
	end

	-- Call currency/heart system
	if ReplicatedStorage:FindFirstChild("GiveHearts") then
		local giveHeartsEvent = ReplicatedStorage.GiveHearts
		local heartReward = self:getBossHeartReward(bossType)
		giveHeartsEvent:FireClient(player, heartReward)
		print("‚ù§Ô∏è Gave", heartReward, "hearts to", player.Name)
	end

	-- Give boss-specific items/abilities
	self:giveBossSpecificRewards(player, bossType)
end

function BossIntegration:getBossHeartReward(bossType)
	local heartRewards = {
		["BASEMENT_KEEPER"] = 10,
		["MAYOR_BRIMSTONE"] = 15,
		["MEMORY_DEVOURER"] = 20,
		["DEMON_LORD"] = 50 -- Final boss gives lots of hearts
	}

	return heartRewards[bossType] or 5
end

function BossIntegration:giveBossSpecificRewards(player, bossType)
	-- Boss-specific unique rewards
	if bossType == "BASEMENT_KEEPER" then
		-- Give cleaning immunity or janitor's key
		print("üóùÔ∏è Giving Janitor's Key to", player.Name)
	elseif bossType == "MAYOR_BRIMSTONE" then
		-- Give town access pass or mayor's seal
		print("üèõÔ∏è Giving Mayor's Seal to", player.Name)
	elseif bossType == "MEMORY_DEVOURER" then
		-- Give memory protection or forgotten knowledge
		print("üß† Giving Memory Protection to", player.Name)
	elseif bossType == "DEMON_LORD" then
		-- Give father's love or demon's bane
		print("üë®‚Äçüë¶ Giving Father's Love to", player.Name)
	end
end

-- ========================================================================
-- PROGRESSION SYSTEM INTEGRATION
-- ========================================================================

function BossIntegration:hookProgressionSystem()
	print("üìà Hooking into progression system...")

	-- This will depend on your existing progression system
	-- For now, we'll create a basic integration point
end

function BossIntegration:updateBossProgression(player, bossType)
	-- Update player's boss completion status
	if _G.PlayerProgress then
		_G.PlayerProgress:setBossDefeated(player, bossType, true)
		print("üìà Updated progression for", player.Name, "- defeated", bossType)
	end

	-- Calculate new progression percentage
	local progressPercent = self:calculateProgressionPercent(player)

	-- Update global progression
	if _G.ProgressionManager then
		_G.ProgressionManager:updatePlayerProgress(player, progressPercent)
	end
end

function BossIntegration:calculateProgressionPercent(player)
	local totalBosses = 4 -- BASEMENT_KEEPER, MAYOR_BRIMSTONE, MEMORY_DEVOURER, DEMON_LORD
	local defeatedBosses = 0

	if _G.PlayerProgress then
		for bossType, _ in pairs(INTEGRATION_CONFIG.BOSS_AREAS) do
			if _G.PlayerProgress:isBossDefeated(player, bossType) then
				defeatedBosses = defeatedBosses + 1
			end
		end
	end

	return (defeatedBosses / totalBosses) * 100
end

-- ========================================================================
-- DOOR SYSTEM INTEGRATION
-- ========================================================================

function BossIntegration:hookDoorSystem()
	print("üö™ Hooking into door system...")

	-- This integrates with your existing door system
end

function BossIntegration:unlockNextAreas(player, bossType)
	-- Unlock doors/areas based on boss defeated
	local unlockMap = {
		["BASEMENT_KEEPER"] = "TerrorTownEntrance",
		["MAYOR_BRIMSTONE"] = "MemoryAbyssEntrance", 
		["MEMORY_DEVOURER"] = "HeartOfDespairEntrance",
		["DEMON_LORD"] = "FinalEscape"
	}

	local areaToUnlock = unlockMap[bossType]
	if areaToUnlock then
		if _G.DoorManager then
			_G.DoorManager:unlockArea(areaToUnlock, player)
			print("üö™ Unlocked area:", areaToUnlock, "for", player.Name)
		end

		-- Also trigger any area-specific unlock events
		self:triggerAreaUnlock(areaToUnlock, player)
	end
end

function BossIntegration:triggerAreaUnlock(areaName, player)
	-- Send unlock event to client for UI updates
	if ReplicatedStorage:FindFirstChild("AreaUnlocked") then
		local unlockEvent = ReplicatedStorage.AreaUnlocked
		unlockEvent:FireClient(player, areaName)
	end

	print("üåü Area unlocked:", areaName, "for", player.Name)
end

-- ========================================================================
-- UTILITY FUNCTIONS
-- ========================================================================

function BossIntegration:getPlayersInBossRoom(boss)
	local players = {}
	local bossPosition = boss.HumanoidRootPart.Position

	for _, player in pairs(Players:GetPlayers()) do
		if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			local distance = (player.Character.HumanoidRootPart.Position - bossPosition).Magnitude
			if distance <= 100 then -- Within boss room range
				table.insert(players, player)
			end
		end
	end

	return players
end

function BossIntegration:getRoomSize(room)
	-- Calculate room size from its bounds
	local min, max = room:GetBoundingBox()
	return max - min
end

function BossIntegration:getRoomCenter(room)
	-- Calculate room center
	local cf, size = room:GetBoundingBox()
	return cf.Position
end

function BossIntegration:setupBossRoomDetection()
	-- Monitor for new rooms being created
	workspace.ChildAdded:Connect(function(child)
		if child.Name == "Rooms" or child.Parent == workspace:FindFirstChild("Rooms") then
			-- Check if this is a boss room
			task.wait(1) -- Give room time to fully generate
			self:checkForBossRoom(child)
		end
	end)
end

function BossIntegration:checkForBossRoom(room)
	-- Check if room contains boss-related keywords
	local bossKeywords = {"Boss", "BOSS", "boss"}

	for _, keyword in pairs(bossKeywords) do
		if string.find(room.Name, keyword) then
			print("üîç Detected potential boss room:", room.Name)
			-- Try to set up as boss room
			local roomType = room.Name
			self:setupBossRoom(room, roomType)
			break
		end
	end
end

function BossIntegration:triggerBossEntrance(boss, bossType, player)
	-- Trigger dramatic boss entrance effects
	print("üé≠ Boss entrance triggered for:", bossType)

	-- Send boss entrance event to all players in area
	if ReplicatedStorage:FindFirstChild("BossEntrance") then
		local entranceEvent = ReplicatedStorage.BossEntrance
		for _, p in pairs(self:getPlayersInBossRoom(boss)) do
			entranceEvent:FireClient(p, bossType, boss)
		end
	end

	-- Lock room doors during boss fight
	self:lockBossRoomDoors(boss, true)
end

function BossIntegration:monitorBossDefeat(boss, room, bossType)
	-- Monitor boss health to trigger victory when defeated
	local humanoid = boss:FindFirstChild("Humanoid")
	if humanoid then
		humanoid.Died:Connect(function()
			print("üíÄ Boss defeated:", bossType)

			-- Unlock room doors
			self:lockBossRoomDoors(boss, false)

			-- Mark room as completed
			if self.activeBossRooms[room] then
				self.activeBossRooms[room].isCompleted = true
			end

			-- Trigger victory celebration
			self:triggerVictoryCelebration(boss, bossType)
		end)
	end
end

function BossIntegration:lockBossRoomDoors(boss, locked)
	-- Find and lock/unlock doors in the boss room
	local bossPosition = boss.HumanoidRootPart.Position

	-- Look for doors within boss room range
	for _, door in pairs(workspace:GetDescendants()) do
		if door.Name:find("Door") and door:IsA("Model") then
			local doorPosition = door:FindFirstChild("DoorFrame") or door.PrimaryPart
			if doorPosition then
				local distance = (doorPosition.Position - bossPosition).Magnitude
				if distance <= 100 then -- Within boss room
					if _G.DoorManager then
						if locked then
							_G.DoorManager:lockDoor(door)
						else
							_G.DoorManager:unlockDoor(door)
						end
					end
				end
			end
		end
	end
end

function BossIntegration:triggerVictoryCelebration(boss, bossType)
	-- Send victory event to all nearby players
	if ReplicatedStorage:FindFirstChild("BossVictory") then
		local victoryEvent = ReplicatedStorage.BossVictory
		for _, player in pairs(self:getPlayersInBossRoom(boss)) do
			victoryEvent:FireClient(player, bossType)
		end
	end
end

function BossIntegration:handleRoomVictoryEffects(boss, bossType)
	-- Handle any room-specific effects after boss victory
	print("üéä Handling room victory effects for:", bossType)

	-- Create victory portal or treasure chest
	self:createVictoryRewards(boss, bossType)
end

function BossIntegration:createVictoryRewards(boss, bossType)
	local bossPosition = boss.HumanoidRootPart.Position

	-- Create treasure chest or portal
	local reward = Instance.new("Part")
	reward.Name = "BossReward"
	reward.Size = Vector3.new(4, 4, 4)
	reward.Position = bossPosition + Vector3.new(0, 0, 10)
	reward.Anchored = true
	reward.Color = Color3.fromRGB(255, 215, 0) -- Gold color
	reward.Material = Enum.Material.Neon
	reward.Parent = workspace

	-- Add interaction
	reward.Touched:Connect(function(hit)
		local player = Players:GetPlayerFromCharacter(hit.Parent)
		if player then
			print("üéÅ Player", player.Name, "collected boss reward for", bossType)
			reward:Destroy()
		end
	end)
end

-- ========================================================================
-- GLOBAL INSTANCE
-- ========================================================================

local bossIntegration = BossIntegration.new()
_G.BossIntegration = bossIntegration

print("üîó Boss Integration System loaded successfully!")
print("üéÆ Boss system is now integrated with existing game systems")
print("üëë Bosses will automatically spawn in designated boss rooms")
