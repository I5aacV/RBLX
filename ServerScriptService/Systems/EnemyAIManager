-- ========================================================================
-- FINAL CLEAN ENEMY AI MANAGER - Complete Rewrite
-- Place this in ServerScriptService/Systems/EnemyAIManager
-- ========================================================================

local CollectionService = game:GetService("CollectionService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- ========================================================================
-- CONFIGURATION
-- ========================================================================

local AI_CONFIG = {
	DETECTION_RANGE = 50,
	ATTACK_RANGE = 8,
	RANGED_ATTACK_RANGE = 35,

	SLOW_SPEED = 8,
	NORMAL_SPEED = 12,
	FAST_SPEED = 16,
	FLYING_SPEED = 14,

	MELEE_COOLDOWN = 1.5,
	RANGED_COOLDOWN = 2.0,

	UPDATE_FREQUENCY = 0.1,
	PROJECTILE_SPEED = 40,
	DAMAGE_AMOUNT = 1
}

local MOVEMENT_CONFIG = {
	OBSTACLE_CHECK_DISTANCE = 5,
	STUCK_CHECK_TIME = 2.0,
	STUCK_DISTANCE_THRESHOLD = 2,
	GROUND_CHECK_DISTANCE = 50,

	ENEMY_PERSONAL_SPACE = 4,
	ENEMY_DETECTION_RADIUS = 8,
	SPACING_FORCE_MULTIPLIER = 1.5,

	AVOIDANCE_DIRECTIONS = {
		Vector3.new(1, 0, 0), Vector3.new(-1, 0, 0),
		Vector3.new(0, 0, 1), Vector3.new(0, 0, -1),
		Vector3.new(1, 0, 1), Vector3.new(-1, 0, 1),
		Vector3.new(1, 0, -1), Vector3.new(-1, 0, -1)
	}
}

-- ========================================================================
-- AI TYPE DEFINITIONS
-- ========================================================================

local AI_TYPES = {
	CHASER = {
		tag = "AI_Chaser",
		name = "Chaser AI",
		description = "Follows player and attacks on contact",
		movementType = "GROUND",
		speed = AI_CONFIG.NORMAL_SPEED,
		attackType = "MELEE",
		behavior = "AGGRESSIVE"
	},

	SHOOTER = {
		tag = "AI_Shooter",
		name = "Shooter AI",
		description = "Maintains distance and shoots projectiles",
		movementType = "GROUND",
		speed = AI_CONFIG.SLOW_SPEED,
		attackType = "RANGED",
		behavior = "CAUTIOUS",
		preferredDistance = 25
	},

	FLYER = {
		tag = "AI_Flyer",
		name = "Flying AI",
		description = "Flies overhead and dives at player with hit-and-run attacks",
		movementType = "FLYING",
		speed = AI_CONFIG.FLYING_SPEED,
		attackType = "MELEE",
		behavior = "HIT_AND_RUN",
		preferredDistance = 15,
		flyHeight = 8,
		diveSpeed = 20
	},

	ORBITER = {
		tag = "AI_Orbiter",
		name = "Orbiter AI",
		description = "Circles around player while attacking",
		movementType = "GROUND",
		speed = AI_CONFIG.NORMAL_SPEED,
		attackType = "RANGED",
		behavior = "TACTICAL",
		orbitDistance = 15
	},

	COWARD = {
		tag = "AI_Coward",
		name = "Coward AI",
		description = "Flees from player, attacks from far away",
		movementType = "GROUND",
		speed = AI_CONFIG.FAST_SPEED,
		attackType = "RANGED",
		behavior = "DEFENSIVE",
		fleeDistance = 20
	},

	WANDERER = {
		tag = "AI_Wanderer",
		name = "Wanderer AI",
		description = "Walks around randomly like NPC, damages on contact",
		movementType = "GROUND",
		speed = AI_CONFIG.SLOW_SPEED,
		attackType = "CONTACT",
		behavior = "WANDER"
	}
}

-- ========================================================================
-- ENEMY AI MANAGER CLASS
-- ========================================================================

local EnemyAIManager = {}
EnemyAIManager.__index = EnemyAIManager

function EnemyAIManager.new()
	local self = setmetatable({}, EnemyAIManager)
	self.activeEnemies = {}
	self.lastUpdate = {}
	self:initializeAI()
	return self
end

function EnemyAIManager:initializeAI()
	print("🤖 Initializing Enemy AI System...")

	for aiType, config in pairs(AI_TYPES) do
		self:setupAIType(aiType, config)
	end

	self:startAIUpdateLoop()
	print("✅ Enemy AI System initialized with", self:countAITypes(), "AI types")
end

function EnemyAIManager:setupAIType(aiType, config)
	print("🏷️ Setting up AI type:", config.name)

	CollectionService:GetInstanceAddedSignal(config.tag):Connect(function(enemy)
		self:registerEnemy(enemy, aiType, config)
	end)

	for _, enemy in pairs(CollectionService:GetTagged(config.tag)) do
		self:registerEnemy(enemy, aiType, config)
	end
end

function EnemyAIManager:registerEnemy(enemy, aiType, config)
	if self.activeEnemies[enemy] then return end

	local humanoid = enemy:FindFirstChild("Humanoid")
	local rootPart = enemy:FindFirstChild("HumanoidRootPart")

	if not humanoid or not rootPart then
		warn("❌ Enemy missing essential parts:", enemy.Name)
		return
	end

	self.activeEnemies[enemy] = {
		enemy = enemy,
		aiType = aiType,
		config = config,
		lastAttack = 0,
		currentTarget = nil,
		lastKnownPlayerPos = nil,
		strafeDirection = nil,
		stuckDetection = nil
	}

	humanoid.Died:Connect(function()
		self:unregisterEnemy(enemy)
	end)

	print("✅ Registered", config.name, "for", enemy.Name)
end

function EnemyAIManager:unregisterEnemy(enemy)
	if self.activeEnemies[enemy] then
		self.activeEnemies[enemy] = nil
		print("🗑️ Unregistered enemy:", enemy.Name)
	end
end

function EnemyAIManager:startAIUpdateLoop()
	print("🔄 Starting AI update loop...")

	RunService.Heartbeat:Connect(function()
		local currentTime = tick()

		for enemy, aiData in pairs(self.activeEnemies) do
			if enemy.Parent and aiData then
				if not self.lastUpdate[enemy] or currentTime - self.lastUpdate[enemy] >= AI_CONFIG.UPDATE_FREQUENCY then
					self:updateEnemyAI(aiData, currentTime)
					self.lastUpdate[enemy] = currentTime
				end
			else
				self:unregisterEnemy(enemy)
			end
		end
	end)
end

-- ========================================================================
-- CORE AI UPDATE
-- ========================================================================

function EnemyAIManager:updateEnemyAI(aiData, currentTime)
	local enemy = aiData.enemy
	local config = aiData.config
	local humanoid = enemy:FindFirstChild("Humanoid")
	local rootPart = enemy:FindFirstChild("HumanoidRootPart")

	if not humanoid or not rootPart then
		self:unregisterEnemy(enemy)
		return
	end

	if humanoid.Health <= 0 then
		self:unregisterEnemy(enemy)
		return
	end

	-- Handle flying movement
	if config.movementType == "FLYING" then
		self:handleFlyingMovement(aiData)
	end

	-- Route to behavior
	if config.behavior == "WANDER" then
		self:updateWandererAI(aiData, currentTime)
		return
	end

	-- Find nearest player for targeting behaviors
	local target = self:findNearestPlayer(rootPart.Position)
	if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then
		humanoid:MoveTo(rootPart.Position)
		return
	end

	local targetPosition = target.Character.HumanoidRootPart.Position
	local distance = (targetPosition - rootPart.Position).Magnitude

	if distance > AI_CONFIG.DETECTION_RANGE then
		humanoid:MoveTo(rootPart.Position)
		return
	end

	aiData.currentTarget = target
	aiData.lastKnownPlayerPos = targetPosition

	-- Route to specific behaviors
	if config.behavior == "AGGRESSIVE" then
		self:updateChaserAI(aiData, targetPosition, distance)
	elseif config.behavior == "CAUTIOUS" then
		self:updateShooterAI(aiData, targetPosition, distance)
	elseif config.behavior == "HIT_AND_RUN" then
		self:updateFlyerAI(aiData, targetPosition, distance, currentTime)
	elseif config.behavior == "TACTICAL" then
		self:updateOrbiterAI(aiData, targetPosition, distance)
	elseif config.behavior == "DEFENSIVE" then
		self:updateCowardAI(aiData, targetPosition, distance)
	end

	-- Check for attacks
	self:checkForAttacks(aiData, distance, currentTime)
end

-- ========================================================================
-- AI BEHAVIORS
-- ========================================================================

function EnemyAIManager:updateChaserAI(aiData, targetPosition, distance)
	if distance > AI_CONFIG.ATTACK_RANGE then
		self:moveTowardsTarget(aiData, targetPosition)
	else
		local humanoid = aiData.enemy:FindFirstChild("Humanoid")
		local rootPart = aiData.enemy:FindFirstChild("HumanoidRootPart")
		if humanoid and rootPart then
			humanoid:MoveTo(rootPart.Position)
		end
	end
end

function EnemyAIManager:updateShooterAI(aiData, targetPosition, distance)
	local config = aiData.config
	local preferredDistance = config.preferredDistance or 25

	if distance < preferredDistance - 5 then
		self:moveAwayFromTarget(aiData, targetPosition)
	elseif distance > preferredDistance + 10 then
		self:moveTowardsTarget(aiData, targetPosition)
	else
		self:strafeAroundTarget(aiData, targetPosition)
	end
end

function EnemyAIManager:updateFlyerAI(aiData, targetPosition, distance, currentTime)
	local config = aiData.config
	local preferredDistance = config.preferredDistance or 15

	if not aiData.flyerState then
		aiData.flyerState = "CIRCLING"
		aiData.lastStateChange = currentTime
	end

	local timeSinceStateChange = currentTime - aiData.lastStateChange

	if aiData.flyerState == "CIRCLING" then
		if distance < preferredDistance - 3 then
			self:moveAwayFromTarget(aiData, targetPosition)
		elseif distance > preferredDistance + 5 then
			self:moveTowardsTarget(aiData, targetPosition)
		else
			self:strafeAroundTarget(aiData, targetPosition)
		end

		if timeSinceStateChange > (2 + math.random() * 2) and distance <= 20 then
			aiData.flyerState = "DIVING"
			aiData.lastStateChange = currentTime
			print("✈️", aiData.enemy.Name, "starting dive attack!")
		end

	elseif aiData.flyerState == "DIVING" then
		local humanoid = aiData.enemy:FindFirstChild("Humanoid")
		if humanoid then
			humanoid.WalkSpeed = config.diveSpeed or 20
			self:moveTowardsTarget(aiData, targetPosition)
		end

		if timeSinceStateChange > 2 or distance <= 6 then
			aiData.flyerState = "RETREATING"
			aiData.lastStateChange = currentTime
			print("✈️", aiData.enemy.Name, "retreating after dive!")
		end

	elseif aiData.flyerState == "RETREATING" then
		local humanoid = aiData.enemy:FindFirstChild("Humanoid")
		if humanoid then
			humanoid.WalkSpeed = config.speed
		end
		self:moveAwayFromTarget(aiData, targetPosition)

		if timeSinceStateChange > (1 + math.random()) then
			aiData.flyerState = "CIRCLING"
			aiData.lastStateChange = currentTime
		end
	end
end

function EnemyAIManager:updateOrbiterAI(aiData, targetPosition, distance)
	local config = aiData.config
	local orbitDistance = config.orbitDistance or 15

	if distance < orbitDistance - 3 then
		self:moveAwayFromTarget(aiData, targetPosition)
	elseif distance > orbitDistance + 3 then
		self:moveTowardsTarget(aiData, targetPosition)
	else
		self:strafeAroundTarget(aiData, targetPosition)
	end
end

function EnemyAIManager:updateCowardAI(aiData, targetPosition, distance)
	local config = aiData.config
	local fleeDistance = config.fleeDistance or 20

	if distance < fleeDistance then
		self:moveAwayFromTarget(aiData, targetPosition)
	else
		local humanoid = aiData.enemy:FindFirstChild("Humanoid")
		local rootPart = aiData.enemy:FindFirstChild("HumanoidRootPart")
		if humanoid and rootPart then
			humanoid:MoveTo(rootPart.Position)
		end
	end
end

function EnemyAIManager:updateWandererAI(aiData, currentTime)
	local enemy = aiData.enemy
	local humanoid = enemy:FindFirstChild("Humanoid")
	local rootPart = enemy:FindFirstChild("HumanoidRootPart")

	if not humanoid or not rootPart then return end

	-- Initialize wanderer data (based on NPC pattern)
	if not aiData.wandererData then
		aiData.wandererData = {
			isWalking = false,
			walkTarget = rootPart.Position,
			lastWalk = currentTime,
			walkInterval = math.random(1, 3),
			walkDistance = math.random(10, 30)
		}
	end

	local wandererData = aiData.wandererData

	-- Check if it's time to start walking
	if not wandererData.isWalking and (currentTime - wandererData.lastWalk) >= wandererData.walkInterval then
		-- Pick a random direction and distance
		local angle = math.random() * math.pi * 2
		local distance = wandererData.walkDistance

		local newTarget = Vector3.new(
			rootPart.Position.X + math.cos(angle) * distance,
			rootPart.Position.Y,
			rootPart.Position.Z + math.sin(angle) * distance
		)

		wandererData.walkTarget = newTarget
		wandererData.isWalking = true

		humanoid:MoveTo(wandererData.walkTarget)
		humanoid.WalkSpeed = aiData.config.speed

		print("👻", enemy.Name, "started walking to new location")
	end

	-- Check if we've reached the target or should stop
	if wandererData.isWalking then
		local distanceToTarget = (wandererData.walkTarget - rootPart.Position).Magnitude

		if distanceToTarget < 3 or (currentTime - wandererData.lastWalk) > 10 then
			wandererData.isWalking = false
			wandererData.lastWalk = currentTime
			wandererData.walkInterval = math.random(3, 6)
			wandererData.walkDistance = math.random(10, 30)

			humanoid:MoveTo(rootPart.Position)
			print("👻", enemy.Name, "stopped walking, waiting", wandererData.walkInterval, "seconds")
		end
	end

	-- Contact damage check
	self:checkWandererContactDamage(aiData, currentTime)
end

-- ========================================================================
-- MOVEMENT FUNCTIONS
-- ========================================================================

function EnemyAIManager:moveTowardsTarget(aiData, targetPosition)
	local enemy = aiData.enemy
	local humanoid = enemy:FindFirstChild("Humanoid")
	local rootPart = enemy:FindFirstChild("HumanoidRootPart")

	if not humanoid or not rootPart then return end

	local currentPos = rootPart.Position
	local direction = (targetPosition - currentPos)
	local distance = direction.Magnitude

	if distance > 0.1 then
		direction = direction.Unit
	else
		humanoid:MoveTo(currentPos)
		return
	end

	local spacingOffset = self:calculateEnemySpacingOffset(rootPart, aiData)
	direction = (direction + spacingOffset).Unit

	local finalDirection = self:getObstacleAvoidedDirection(rootPart, direction, aiData)
	local moveDistance = math.min(distance, 50)
	local finalTarget = currentPos + (finalDirection * moveDistance)

	humanoid:MoveTo(Vector3.new(finalTarget.X, targetPosition.Y, finalTarget.Z))
	humanoid.WalkSpeed = aiData.config.speed

	self:updateStuckDetection(aiData, currentPos)
end

function EnemyAIManager:moveAwayFromTarget(aiData, targetPosition)
	local enemy = aiData.enemy
	local humanoid = enemy:FindFirstChild("Humanoid")
	local rootPart = enemy:FindFirstChild("HumanoidRootPart")

	if not humanoid or not rootPart then return end

	local currentPos = rootPart.Position
	local awayDirection = (currentPos - targetPosition).Unit

	local finalDirection = self:getObstacleAvoidedDirection(rootPart, awayDirection, aiData)
	local retreatDistance = 15
	local finalTarget = currentPos + (finalDirection * retreatDistance)

	humanoid:MoveTo(finalTarget)
	humanoid.WalkSpeed = aiData.config.speed

	self:updateStuckDetection(aiData, currentPos)
end

function EnemyAIManager:strafeAroundTarget(aiData, targetPosition)
	local enemy = aiData.enemy
	local humanoid = enemy:FindFirstChild("Humanoid")
	local rootPart = enemy:FindFirstChild("HumanoidRootPart")

	if not humanoid or not rootPart then return end

	local currentPos = rootPart.Position
	local toTarget = (targetPosition - currentPos).Unit

	local strafeDirection = Vector3.new(-toTarget.Z, 0, toTarget.X)

	if not aiData.strafeDirection then
		aiData.strafeDirection = math.random() > 0.5 and 1 or -1
	end

	if math.random() < 0.02 then
		aiData.strafeDirection = -aiData.strafeDirection
	end

	strafeDirection = strafeDirection * aiData.strafeDirection

	local finalDirection = self:getObstacleAvoidedDirection(rootPart, strafeDirection, aiData)
	local strafeDistance = 8
	local finalTarget = currentPos + (finalDirection * strafeDistance)

	humanoid:MoveTo(finalTarget)
	humanoid.WalkSpeed = aiData.config.speed

	self:updateStuckDetection(aiData, currentPos)
end

-- ========================================================================
-- ANTI-CLUSTERING SYSTEM
-- ========================================================================

function EnemyAIManager:calculateEnemySpacingOffset(rootPart, aiData)
	local currentPos = rootPart.Position
	local spacingOffset = Vector3.new(0, 0, 0)
	local nearbyCount = 0

	for otherEnemy, otherAiData in pairs(self.activeEnemies) do
		if otherEnemy ~= aiData.enemy and otherEnemy.Parent then
			local otherRootPart = otherEnemy:FindFirstChild("HumanoidRootPart")
			if otherRootPart then
				local distance = (otherRootPart.Position - currentPos).Magnitude

				if distance < MOVEMENT_CONFIG.ENEMY_DETECTION_RADIUS and distance > 0.1 then
					local awayDirection = (currentPos - otherRootPart.Position).Unit
					local pushStrength = (MOVEMENT_CONFIG.ENEMY_PERSONAL_SPACE - distance) / MOVEMENT_CONFIG.ENEMY_PERSONAL_SPACE
					pushStrength = math.max(0, pushStrength) * MOVEMENT_CONFIG.SPACING_FORCE_MULTIPLIER

					spacingOffset = spacingOffset + (awayDirection * pushStrength)
					nearbyCount = nearbyCount + 1
				end
			end
		end
	end

	if nearbyCount > 0 then
		spacingOffset = spacingOffset / nearbyCount
		local maxSpacingForce = 0.3
		if spacingOffset.Magnitude > maxSpacingForce then
			spacingOffset = spacingOffset.Unit * maxSpacingForce
		end
	end

	return spacingOffset
end

function EnemyAIManager:getObstacleAvoidedDirection(rootPart, preferredDirection, aiData)
	local currentPos = rootPart.Position
	local checkDistance = MOVEMENT_CONFIG.OBSTACLE_CHECK_DISTANCE

	if self:isDirectionClearFromEverything(currentPos, preferredDirection, checkDistance, aiData) then
		return preferredDirection
	end

	local bestDirection = preferredDirection
	local bestScore = -1

	for _, testDirection in pairs(MOVEMENT_CONFIG.AVOIDANCE_DIRECTIONS) do
		if self:isDirectionClearFromEverything(currentPos, testDirection, checkDistance, aiData) then
			local score = preferredDirection:Dot(testDirection)
			if score > bestScore then
				bestScore = score
				bestDirection = testDirection
			end
		end
	end

	return bestDirection
end

function EnemyAIManager:isDirectionClearFromEverything(startPos, direction, distance, aiData)
	if not self:isDirectionClear(startPos, direction, distance) then
		return false
	end

	local testPos = startPos + (direction * distance)

	for otherEnemy, otherAiData in pairs(self.activeEnemies) do
		if otherEnemy ~= aiData.enemy and otherEnemy.Parent then
			local otherRootPart = otherEnemy:FindFirstChild("HumanoidRootPart")
			if otherRootPart then
				local distanceToOther = (otherRootPart.Position - testPos).Magnitude
				if distanceToOther < MOVEMENT_CONFIG.ENEMY_PERSONAL_SPACE then
					return false
				end
			end
		end
	end

	return true
end

function EnemyAIManager:isDirectionClear(startPos, direction, distance)
	local raycastParams = RaycastParams.new()
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	raycastParams.FilterDescendantsInstances = {workspace.CurrentCamera}

	local rayResult = workspace:Raycast(
		startPos + Vector3.new(0, 1, 0),
		direction * distance,
		raycastParams
	)

	if rayResult then
		local hitPart = rayResult.Instance
		if hitPart.CanCollide and not hitPart.Parent:FindFirstChild("Humanoid") then
			return false
		end
	end

	return true
end

-- ========================================================================
-- STUCK DETECTION
-- ========================================================================

function EnemyAIManager:updateStuckDetection(aiData, currentPos)
	local currentTime = tick()

	if not aiData.stuckDetection then
		aiData.stuckDetection = {
			lastPosition = currentPos,
			lastMoveTime = currentTime,
			stuckTime = 0
		}
		return
	end

	local stuckData = aiData.stuckDetection
	local timeSinceLastCheck = currentTime - stuckData.lastMoveTime

	if timeSinceLastCheck >= 1.0 then
		local distanceMoved = (currentPos - stuckData.lastPosition).Magnitude

		if distanceMoved < MOVEMENT_CONFIG.STUCK_DISTANCE_THRESHOLD then
			stuckData.stuckTime = stuckData.stuckTime + timeSinceLastCheck

			if stuckData.stuckTime >= MOVEMENT_CONFIG.STUCK_CHECK_TIME then
				self:executeStuckRecovery(aiData)
				stuckData.stuckTime = 0
			end
		else
			stuckData.stuckTime = 0
		end

		stuckData.lastPosition = currentPos
		stuckData.lastMoveTime = currentTime
	end
end

function EnemyAIManager:executeStuckRecovery(aiData)
	local enemy = aiData.enemy
	local humanoid = enemy:FindFirstChild("Humanoid")
	local rootPart = enemy:FindFirstChild("HumanoidRootPart")

	if not humanoid or not rootPart then return end

	print("🔄 Executing stuck recovery for", enemy.Name)

	local randomDirection = MOVEMENT_CONFIG.AVOIDANCE_DIRECTIONS[math.random(1, #MOVEMENT_CONFIG.AVOIDANCE_DIRECTIONS)]
	local recoveryDistance = 10
	local newTarget = rootPart.Position + (randomDirection * recoveryDistance)

	humanoid:MoveTo(newTarget)
	humanoid.WalkSpeed = aiData.config.speed * 1.5
end

-- ========================================================================
-- FLYING MOVEMENT
-- ========================================================================

function EnemyAIManager:handleFlyingMovement(aiData)
	local enemy = aiData.enemy
	local rootPart = enemy:FindFirstChild("HumanoidRootPart")

	if not rootPart then return end

	local config = aiData.config
	local flyHeight = config.flyHeight or 8
	local currentPos = rootPart.Position

	local raycastParams = RaycastParams.new()
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	raycastParams.FilterDescendantsInstances = {enemy}

	local groundRay = workspace:Raycast(
		currentPos,
		Vector3.new(0, -MOVEMENT_CONFIG.GROUND_CHECK_DISTANCE, 0),
		raycastParams
	)

	if groundRay then
		local targetY = groundRay.Position.Y + flyHeight
		local heightDifference = math.abs(currentPos.Y - targetY)

		if heightDifference > 2 then
			local bodyPosition = rootPart:FindFirstChild("BodyPosition")
			if not bodyPosition then
				bodyPosition = Instance.new("BodyPosition")
				bodyPosition.MaxForce = Vector3.new(0, 4000, 0)
				bodyPosition.P = 3000
				bodyPosition.D = 500
				bodyPosition.Parent = rootPart
			end

			bodyPosition.Position = Vector3.new(currentPos.X, targetY, currentPos.Z)
		end
	end
end

-- ========================================================================
-- ATTACK SYSTEM
-- ========================================================================

function EnemyAIManager:checkForAttacks(aiData, distance, currentTime)
	local config = aiData.config
	local attackCooldown = self:getAttackCooldown(config.attackType)

	if currentTime - aiData.lastAttack < attackCooldown then
		return
	end

	local inRange = false

	if config.attackType == "MELEE" then
		inRange = distance <= (AI_CONFIG.ATTACK_RANGE + 2)
	elseif config.attackType == "RANGED" then
		inRange = distance <= AI_CONFIG.RANGED_ATTACK_RANGE
	elseif config.attackType == "CONTACT" then
		inRange = distance <= 4
	end

	if inRange then
		print("💥 Attack triggered!", config.attackType, "at distance:", math.floor(distance))
		self:executeAttack(aiData, currentTime)
	end
end

function EnemyAIManager:executeAttack(aiData, currentTime)
	local config = aiData.config
	local target = aiData.currentTarget

	if not target or not target.Character then return end

	aiData.lastAttack = currentTime

	if config.attackType == "MELEE" then
		self:executeMeleeAttack(aiData, target)
	elseif config.attackType == "RANGED" then
		self:executeRangedAttack(aiData, target)
	elseif config.attackType == "CONTACT" then
		self:executeContactAttack(aiData, target)
	end
end

function EnemyAIManager:executeMeleeAttack(aiData, target)
	print("⚔️ Melee attack from", aiData.enemy.Name, "to", target.Name)

	local damageDealt = false
	if ReplicatedStorage:FindFirstChild("SpikeHeartDamage") then
		local damageEvent = ReplicatedStorage.SpikeHeartDamage
		pcall(function()
			damageEvent:FireClient(target, AI_CONFIG.DAMAGE_AMOUNT)
			damageDealt = true
			print("✅ Heart system damage sent to", target.Name)
		end)
	end

	if not damageDealt and target.Character and target.Character:FindFirstChild("Humanoid") then
		pcall(function()
			local humanoid = target.Character.Humanoid
			humanoid.Health = math.max(0, humanoid.Health - (AI_CONFIG.DAMAGE_AMOUNT * 5))
			damageDealt = true
			print("✅ Direct humanoid damage to", target.Name)
		end)
	end

	if not damageDealt then
		print("❌ No damage system found! Check SpikeHeartDamage RemoteEvent")
	end

	self:createAttackEffect(aiData.enemy, "MELEE")
end

function EnemyAIManager:executeRangedAttack(aiData, target)
	print("🏹 Ranged attack from", aiData.enemy.Name, "to", target.Name)

	local enemy = aiData.enemy
	local rootPart = enemy:FindFirstChild("HumanoidRootPart")
	local targetPos = target.Character.HumanoidRootPart.Position

	if not rootPart then
		print("❌ No HumanoidRootPart for ranged attack!")
		return
	end

	local shootPos = rootPart.Position
	self:createProjectile(shootPos, targetPos, target)
	self:createAttackEffect(enemy, "RANGED")
end

function EnemyAIManager:executeContactAttack(aiData, target)
	print("⚡ Contact damage from", aiData.enemy.Name, "to", target.Name)

	local damageDealt = false
	if ReplicatedStorage:FindFirstChild("SpikeHeartDamage") then
		local damageEvent = ReplicatedStorage.SpikeHeartDamage
		pcall(function()
			damageEvent:FireClient(target, AI_CONFIG.DAMAGE_AMOUNT)
			damageDealt = true
			print("✅ Contact damage sent to", target.Name)
		end)
	end

	if not damageDealt and target.Character and target.Character:FindFirstChild("Humanoid") then
		pcall(function()
			local humanoid = target.Character.Humanoid
			humanoid.Health = math.max(0, humanoid.Health - (AI_CONFIG.DAMAGE_AMOUNT * 5))
			damageDealt = true
			print("✅ Direct contact damage to", target.Name)
		end)
	end

	if not damageDealt then
		print("❌ No damage system found! Check SpikeHeartDamage RemoteEvent")
	end

	self:flashEnemyColor(aiData.enemy, Color3.fromRGB(255, 255, 255), 0.2)
end

function EnemyAIManager:checkWandererContactDamage(aiData, currentTime)
	local enemy = aiData.enemy
	local rootPart = enemy:FindFirstChild("HumanoidRootPart")

	if not rootPart then return end

	if currentTime - aiData.lastAttack < 1.0 then return end

	for _, player in pairs(Players:GetPlayers()) do
		if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			local playerPos = player.Character.HumanoidRootPart.Position
			local distance = (playerPos - rootPart.Position).Magnitude

			if distance <= 4 then
				print("⚡ Wanderer contact damage:", player.Name)
				self:executeContactAttack(aiData, player)
				aiData.lastAttack = currentTime
				break
			end
		end
	end
end

-- ========================================================================
-- PROJECTILE SYSTEM
-- ========================================================================

function EnemyAIManager:createProjectile(startPos, targetPos, target)
	local projectile = Instance.new("Part")
	projectile.Name = "EnemyProjectile"
	projectile.Size = Vector3.new(1, 1, 1)
	projectile.Shape = Enum.PartType.Ball
	projectile.Material = Enum.Material.Neon
	projectile.Color = Color3.fromRGB(255, 100, 100)
	projectile.CanCollide = false
	projectile.Anchored = true

	local adjustedStartPos = startPos + Vector3.new(0, 1, 0)
	projectile.Position = adjustedStartPos
	projectile.Parent = workspace

	local light = Instance.new("PointLight")
	light.Color = Color3.fromRGB(255, 100, 100)
	light.Brightness = 2
	light.Range = 5
	light.Parent = projectile

	local direction = (targetPos - adjustedStartPos).Unit
	local distance = (targetPos - adjustedStartPos).Magnitude
	local travelTime = distance / AI_CONFIG.PROJECTILE_SPEED

	local adjustedTargetPos = targetPos + Vector3.new(0, 2, 0)

	local tween = TweenService:Create(projectile,
		TweenInfo.new(travelTime, Enum.EasingStyle.Linear),
		{Position = adjustedTargetPos}
	)

	tween:Play()

	task.spawn(function()
		local startTime = tick()

		while projectile.Parent and tick() - startTime < travelTime + 0.5 do
			if target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
				local playerPos = target.Character.HumanoidRootPart.Position
				local projectilePos = projectile.Position
				local hitDistance = (playerPos - projectilePos).Magnitude

				if hitDistance <= 3 then
					if ReplicatedStorage:FindFirstChild("SpikeHeartDamage") then
						local damageEvent = ReplicatedStorage.SpikeHeartDamage
						pcall(function()
							damageEvent:FireClient(target, AI_CONFIG.DAMAGE_AMOUNT)
							print("💥 Projectile hit", target.Name)
						end)
					end

					local explosion = Instance.new("Explosion")
					explosion.Position = projectilePos
					explosion.BlastRadius = 3
					explosion.BlastPressure = 0
					explosion.Parent = workspace

					projectile:Destroy()
					return
				end
			end

			task.wait(0.1)
		end

		if projectile.Parent then
			projectile:Destroy()
		end
	end)
end

-- ========================================================================
-- VISUAL EFFECTS
-- ========================================================================

function EnemyAIManager:createAttackEffect(enemy, attackType)
	local rootPart = enemy:FindFirstChild("HumanoidRootPart")
	if not rootPart then return end

	if attackType == "MELEE" then
		self:flashEnemyColor(enemy, Color3.fromRGB(255, 0, 0), 0.2)

		local dust = Instance.new("Part")
		dust.Size = Vector3.new(4, 1, 4)
		dust.Shape = Enum.PartType.Block
		dust.Material = Enum.Material.Sand
		dust.Color = Color3.fromRGB(150, 150, 150)
		dust.CanCollide = false
		dust.Anchored = true
		dust.Position = rootPart.Position
		dust.Transparency = 0.3
		dust.Parent = workspace

		local tween = TweenService:Create(dust,
			TweenInfo.new(1.0, Enum.EasingStyle.Quad),
			{Size = Vector3.new(8, 2, 8), Transparency = 1}
		)
		tween:Play()

		game:GetService("Debris"):AddItem(dust, 1.0)

	elseif attackType == "RANGED" then
		self:flashEnemyColor(enemy, Color3.fromRGB(0, 100, 255), 0.3)
	end
end

function EnemyAIManager:flashEnemyColor(enemy, color, duration)
	for _, part in pairs(enemy:GetDescendants()) do
		if part:IsA("BasePart") then
			local originalColor = part.Color
			part.Color = color

			task.spawn(function()
				task.wait(duration)
				if part.Parent then
					part.Color = originalColor
				end
			end)
		end
	end
end

-- ========================================================================
-- UTILITY FUNCTIONS
-- ========================================================================

function EnemyAIManager:findNearestPlayer(position)
	local nearestPlayer = nil
	local nearestDistance = math.huge

	for _, player in pairs(Players:GetPlayers()) do
		if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			local distance = (player.Character.HumanoidRootPart.Position - position).Magnitude
			if distance < nearestDistance then
				nearestPlayer = player
				nearestDistance = distance
			end
		end
	end

	return nearestPlayer
end

function EnemyAIManager:getAttackCooldown(attackType)
	if attackType == "MELEE" then
		return AI_CONFIG.MELEE_COOLDOWN
	elseif attackType == "RANGED" then
		return AI_CONFIG.RANGED_COOLDOWN
	end
	return 2.0
end

function EnemyAIManager:countAITypes()
	local count = 0
	for _ in pairs(AI_TYPES) do
		count = count + 1
	end
	return count
end

-- ========================================================================
-- PUBLIC API
-- ========================================================================

function EnemyAIManager:registerNewAIType(aiTypeName, config)
	AI_TYPES[aiTypeName] = config
	self:setupAIType(aiTypeName, config)
	print("🆕 Registered new AI type:", config.name)
end

function EnemyAIManager:applyAIToEnemy(enemy, aiTypeName)
	local aiType = AI_TYPES[aiTypeName]
	if not aiType then
		warn("❌ Unknown AI type:", aiTypeName)
		return false
	end

	CollectionService:AddTag(enemy, aiType.tag)
	print("🏷️ Applied", aiType.name, "to", enemy.Name)
	return true
end

function EnemyAIManager:removeAIFromEnemy(enemy)
	for _, aiType in pairs(AI_TYPES) do
		if CollectionService:HasTag(enemy, aiType.tag) then
			CollectionService:RemoveTag(enemy, aiType.tag)
		end
	end

	self:unregisterEnemy(enemy)
	print("🗑️ Removed AI from", enemy.Name)
end

function EnemyAIManager:getAIStats()
	local stats = {
		totalEnemies = 0,
		aiTypes = {}
	}

	for enemy, aiData in pairs(self.activeEnemies) do
		stats.totalEnemies = stats.totalEnemies + 1
		local aiTypeName = aiData.aiType

		if not stats.aiTypes[aiTypeName] then
			stats.aiTypes[aiTypeName] = 0
		end
		stats.aiTypes[aiTypeName] = stats.aiTypes[aiTypeName] + 1
	end

	return stats
end

-- ========================================================================
-- GLOBAL INSTANCE & DEBUG COMMANDS
-- ========================================================================

local aiManager = EnemyAIManager.new()
_G.EnemyAI = aiManager

_G.AIStats = function()
	local stats = aiManager:getAIStats()
	print("🤖 AI SYSTEM STATS:")
	print("📊 Total active enemies:", stats.totalEnemies)
	print("🏷️ AI Types in use:")
	for aiType, count in pairs(stats.aiTypes) do
		print("  ", aiType .. ":", count, "enemies")
	end
end

_G.ApplyAI = function(enemyName, aiType)
	local enemy = workspace:FindFirstChild(enemyName)
	if enemy then
		return aiManager:applyAIToEnemy(enemy, aiType)
	else
		print("❌ Enemy not found:", enemyName)
		return false
	end
end

_G.RemoveAI = function(enemyName)
	local enemy = workspace:FindFirstChild(enemyName)
	if enemy then
		aiManager:removeAIFromEnemy(enemy)
		return true
	else
		print("❌ Enemy not found:", enemyName)
		return false
	end
end

_G.ListAITypes = function()
	print("🤖 AVAILABLE AI TYPES:")
	for aiTypeName, config in pairs(AI_TYPES) do
		print("🏷️", aiTypeName, "-", config.name)
		print("   📝", config.description)
		print("   🏃 Movement:", config.movementType, "| Speed:", config.speed)
		print("   ⚔️ Attack:", config.attackType, "| Behavior:", config.behavior)
		print("")
	end
end

_G.SpawnTestEnemy = function(aiType, position)
	aiType = aiType or "CHASER"
	position = position or Vector3.new(0, 10, 0)

	local config = AI_TYPES[aiType]
	if not config then
		print("❌ Unknown AI type:", aiType)
		return
	end

	local enemy = Instance.new("Model")
	enemy.Name = "TestEnemy_" .. aiType
	enemy.Parent = workspace

	local humanoid = Instance.new("Humanoid")
	humanoid.MaxHealth = 50
	humanoid.Health = 50
	humanoid.WalkSpeed = config.speed
	humanoid.Parent = enemy

	local rootPart = Instance.new("Part")
	rootPart.Name = "HumanoidRootPart"
	rootPart.Size = Vector3.new(2, 4, 2)
	rootPart.Position = position
	rootPart.Anchored = false
	rootPart.CanCollide = true
	rootPart.Color = Color3.fromRGB(200, 100, 100)
	rootPart.Parent = enemy

	local head = Instance.new("Part")
	head.Name = "Head"
	head.Size = Vector3.new(1.5, 1.5, 1.5)
	head.Color = Color3.fromRGB(255, 150, 150)
	head.Parent = enemy

	local weld = Instance.new("WeldConstraint")
	weld.Part0 = rootPart
	weld.Part1 = head
	weld.Parent = rootPart

	head.CFrame = rootPart.CFrame * CFrame.new(0, 2.75, 0)

	CollectionService:AddTag(enemy, config.tag)

	print("✅ Spawned test enemy with", config.name, "at", position)
	return enemy
end

_G.CheckActiveEnemies = function()
	if _G.EnemyAI then
		local count = 0
		for enemy, aiData in pairs(_G.EnemyAI.activeEnemies) do
			count = count + 1
			local health = "Unknown"
			if enemy and enemy:FindFirstChild("Humanoid") then
				health = enemy.Humanoid.Health
			end
			print(count .. ".", enemy and enemy.Name or "Unknown", "AI:", aiData.aiType, "Health:", health)
		end
		print("📊 Total active AI enemies:", count)
	end
end

_G.DebugAIEnemies = function()
	if not _G.EnemyAI then
		print("❌ EnemyAI not found")
		return
	end

	print("🤖 AI ENEMY DEBUG:")
	local count = 0
	local deadCount = 0
	local missingParts = 0

	for enemy, aiData in pairs(_G.EnemyAI.activeEnemies) do
		count = count + 1

		if not enemy or not enemy.Parent then
			deadCount = deadCount + 1
			print("  💀 DEAD/MISSING:", aiData.enemy and aiData.enemy.Name or "Unknown")
		else
			local humanoid = enemy:FindFirstChild("Humanoid")
			local rootPart = enemy:FindFirstChild("HumanoidRootPart")

			if not humanoid or not rootPart then
				missingParts = missingParts + 1
				print("  ❌ MISSING PARTS:", enemy.Name, "H:", humanoid and "✅" or "❌", "R:", rootPart and "✅" or "❌")
			else
				print("  ✅ HEALTHY:", enemy.Name, "Health:", humanoid.Health, "AI:", aiData.aiType)
			end
		end
	end

	print("📊 Total:", count, "| Dead:", deadCount, "| Missing Parts:", missingParts, "| Healthy:", count - deadCount - missingParts)
end

_G.CleanupDeadEnemies = function()
	if not _G.EnemyAI then
		print("❌ EnemyAI not found")
		return
	end

	local cleaned = 0
	local toRemove = {}

	for enemy, aiData in pairs(_G.EnemyAI.activeEnemies) do
		if not enemy or not enemy.Parent or not enemy:FindFirstChild("Humanoid") or not enemy:FindFirstChild("HumanoidRootPart") then
			table.insert(toRemove, enemy)
		end
	end

	for _, enemy in pairs(toRemove) do
		_G.EnemyAI:unregisterEnemy(enemy)
		cleaned = cleaned + 1
	end

	print("🧹 Cleaned up", cleaned, "dead/invalid enemies")
end

print("🤖 FINAL CLEAN Enemy AI Manager loaded successfully!")
print("📋 Features:")
print("  ✅ 6 AI types: CHASER, SHOOTER, FLYER, ORBITER, COWARD, WANDERER")
print("  ✅ Anti-clustering system prevents enemy bunching")
print("  ✅ Simplified movement with obstacle avoidance")
print("  ✅ Stuck detection and recovery")
print("  ✅ Flying enemy support")
print("  ✅ Attack types: MELEE, RANGED, CONTACT")
print("")
print("🔧 Debug Commands:")
print("  _G.SpawnTestEnemy('CHASER') - Spawn test chaser")
print("  _G.SpawnTestEnemy('WANDERER') - Spawn test wandering enemy")
print("  _G.SpawnTestEnemy('FLYER') - Spawn test flying enemy")
print("  _G.ListAITypes() - Show all AI types")
print("  _G.AIStats() - Show statistics")
print("")
print("🎯 Ready for your basement demons!")
print("👻 WANDERER: NPC-style random walking with contact damage")

return EnemyAIManager
