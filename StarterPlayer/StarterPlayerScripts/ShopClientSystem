-- ========================================================================
-- SHOP CLIENT SYSTEM - UI and Unique Items
-- Place this in StarterPlayerScripts/ShopClientSystem
-- ========================================================================

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- ========================================================================
-- CLIENT CONFIGURATION
-- ========================================================================

local CLIENT_CONFIG = {
	-- UI Configuration
	SHOP_UI_POSITION = UDim2.new(0.5, -200, 0.5, -150),
	SHOP_UI_SIZE = UDim2.new(0, 400, 0, 300),

	-- Unique item display
	UNIQUE_ITEM_POSITION = UDim2.new(1, -120, 0.5, -60),
	UNIQUE_ITEM_SIZE = UDim2.new(0, 100, 0, 120),

	-- Animation settings
	UI_FADE_TIME = 0.5,
	UNIQUE_ITEM_GLOW_TIME = 2.0,
	PURCHASE_FLASH_TIME = 0.3,

	-- Colors
	UNIQUE_ITEM_GLOW = Color3.fromRGB(255, 215, 0), -- Gold
	AFFORDABLE_COLOR = Color3.fromRGB(100, 255, 100), -- Green
	EXPENSIVE_COLOR = Color3.fromRGB(255, 100, 100), -- Red

	-- Detection
	SHOP_DETECTION_DISTANCE = 15
}

-- ========================================================================
-- SHOP CLIENT MANAGER CLASS
-- ========================================================================

local ShopClientManager = {}
ShopClientManager.__index = ShopClientManager

function ShopClientManager.new()
	local self = setmetatable({}, ShopClientManager)

	self.currentShop = nil
	self.currentShopData = nil
	self.shopUI = nil
	self.uniqueItemUI = nil
	self.playerCoins = 0
	self.remoteEvents = {}
	self.uniqueItemData = nil

	self:initialize()
	return self
end

function ShopClientManager:initialize()
	print("üè™ Shop Client System initializing...")

	-- Setup remote events
	self:setupRemoteEvents()

	-- Create UI elements
	self:createShopUI()
	self:createUniqueItemUI()

	-- Setup shop detection
	self:setupShopDetection()

	-- Setup input handling
	self:setupInputHandling()

	print("‚úÖ Shop Client System ready!")
end

function ShopClientManager:setupRemoteEvents()
	local remoteEventsFolder = ReplicatedStorage:WaitForChild("RemoteEvents")

	-- Wait for shop remotes
	local purchaseRemote = remoteEventsFolder:WaitForChild("ShopPurchase")
	local uniqueItemRemote = remoteEventsFolder:WaitForChild("ShopUniqueItem")
	local uiUpdateRemote = remoteEventsFolder:WaitForChild("ShopUIUpdate")

	-- Also wait for inventory remote
	local inventoryRemote = remoteEventsFolder:WaitForChild("InventoryUpdate")

	self.remoteEvents = {
		purchase = purchaseRemote,
		uniqueItem = uniqueItemRemote,
		uiUpdate = uiUpdateRemote,
		inventory = inventoryRemote
	}

	-- Setup event handlers
	uniqueItemRemote.OnClientEvent:Connect(function(action, data)
		if action == "UNIQUE_ITEM_DATA" then
			self:receiveUniqueItem(data)
		end
	end)

	uiUpdateRemote.OnClientEvent:Connect(function(action, data)
		if action == "PURCHASE_SUCCESS" then
			self:handlePurchaseSuccess(data)
		elseif action == "INSUFFICIENT_FUNDS" then
			self:handleInsufficientFunds(data)
		elseif action == "SHOP_DATA" then
			self:receiveShopData(data)
		end
	end)

	inventoryRemote.OnClientEvent:Connect(function(action, data)
		if action == "UPDATE_INVENTORY" then
			self.playerCoins = data.coins or 0
			self:updateShopPrices()
		end
	end)

	print("üì° Shop client remote events connected")
end

-- ========================================================================
-- SHOP UI CREATION
-- ========================================================================

function ShopClientManager:createShopUI()
	-- Create main shop UI (initially hidden)
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "ShopUI"
	screenGui.ResetOnSpawn = false
	screenGui.DisplayOrder = 100
	screenGui.Parent = playerGui

	-- Main shop frame
	local mainFrame = Instance.new("Frame")
	mainFrame.Name = "ShopFrame"
	mainFrame.Size = CLIENT_CONFIG.SHOP_UI_SIZE
	mainFrame.Position = CLIENT_CONFIG.SHOP_UI_POSITION
	mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	mainFrame.BackgroundTransparency = 0.1
	mainFrame.BorderSizePixel = 0
	mainFrame.Visible = false
	mainFrame.Parent = screenGui

	-- Rounded corners
	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 12)
	corner.Parent = mainFrame

	-- Shop title
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "ShopTitle"
	titleLabel.Size = UDim2.new(1, 0, 0, 40)
	titleLabel.Position = UDim2.new(0, 0, 0, 0)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Text = "üè™ SHOP üè™"
	titleLabel.TextColor3 = Color3.new(1, 1, 1)
	titleLabel.TextScaled = true
	titleLabel.Font = Enum.Font.SourceSansBold
	titleLabel.Parent = mainFrame

	-- Coin display
	local coinFrame = Instance.new("Frame")
	coinFrame.Name = "CoinFrame"
	coinFrame.Size = UDim2.new(0, 120, 0, 30)
	coinFrame.Position = UDim2.new(1, -130, 0, 5)
	coinFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	coinFrame.BorderSizePixel = 0
	coinFrame.Parent = mainFrame

	local coinCorner = Instance.new("UICorner")
	coinCorner.CornerRadius = UDim.new(0, 8)
	coinCorner.Parent = coinFrame

	local coinLabel = Instance.new("TextLabel")
	coinLabel.Name = "CoinLabel"
	coinLabel.Size = UDim2.new(1, 0, 1, 0)
	coinLabel.BackgroundTransparency = 1
	coinLabel.Text = "üí∞ 0"
	coinLabel.TextColor3 = CLIENT_CONFIG.UNIQUE_ITEM_GLOW
	coinLabel.TextScaled = true
	coinLabel.Font = Enum.Font.SourceSansBold
	coinLabel.Parent = coinFrame

	-- Items container
	local itemsFrame = Instance.new("ScrollingFrame")
	itemsFrame.Name = "ItemsFrame"
	itemsFrame.Size = UDim2.new(1, -20, 1, -60)
	itemsFrame.Position = UDim2.new(0, 10, 0, 50)
	itemsFrame.BackgroundTransparency = 1
	itemsFrame.BorderSizePixel = 0
	itemsFrame.ScrollBarThickness = 8
	itemsFrame.Parent = mainFrame

	-- Grid layout for items
	local gridLayout = Instance.new("UIGridLayout")
	gridLayout.CellSize = UDim2.new(0, 180, 0, 80)
	gridLayout.CellPadding = UDim2.new(0, 10, 0, 10)
	gridLayout.SortOrder = Enum.SortOrder.LayoutOrder
	gridLayout.Parent = itemsFrame

	-- Close button
	local closeButton = Instance.new("TextButton")
	closeButton.Name = "CloseButton"
	closeButton.Size = UDim2.new(0, 30, 0, 30)
	closeButton.Position = UDim2.new(1, -35, 0, 5)
	closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
	closeButton.Text = "‚úï"
	closeButton.TextColor3 = Color3.new(1, 1, 1)
	closeButton.TextScaled = true
	closeButton.Font = Enum.Font.SourceSansBold
	closeButton.BorderSizePixel = 0
	closeButton.Parent = mainFrame

	local closeCorner = Instance.new("UICorner")
	closeCorner.CornerRadius = UDim.new(0, 6)
	closeCorner.Parent = closeButton

	closeButton.MouseButton1Click:Connect(function()
		self:hideShopUI()
	end)

	self.shopUI = {
		screenGui = screenGui,
		mainFrame = mainFrame,
		itemsFrame = itemsFrame,
		coinLabel = coinLabel,
		closeButton = closeButton
	}
end

function ShopClientManager:createUniqueItemUI()
	-- Create unique item display (initially hidden)
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "UniqueItemUI"
	screenGui.ResetOnSpawn = false
	screenGui.DisplayOrder = 110
	screenGui.Parent = playerGui

	-- Unique item frame
	local uniqueFrame = Instance.new("Frame")
	uniqueFrame.Name = "UniqueItemFrame"
	uniqueFrame.Size = CLIENT_CONFIG.UNIQUE_ITEM_SIZE
	uniqueFrame.Position = CLIENT_CONFIG.UNIQUE_ITEM_POSITION
	uniqueFrame.BackgroundColor3 = Color3.fromRGB(60, 40, 80)
	uniqueFrame.BackgroundTransparency = 0.2
	uniqueFrame.BorderSizePixel = 0
	uniqueFrame.Visible = false
	uniqueFrame.Parent = screenGui

	-- Glowing border
	local glow = Instance.new("UIStroke")
	glow.Color = CLIENT_CONFIG.UNIQUE_ITEM_GLOW
	glow.Thickness = 3
	glow.Transparency = 0
	glow.Parent = uniqueFrame

	-- Rounded corners
	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 10)
	corner.Parent = uniqueFrame

	-- Unique label
	local uniqueLabel = Instance.new("TextLabel")
	uniqueLabel.Name = "UniqueLabel"
	uniqueLabel.Size = UDim2.new(1, 0, 0, 25)
	uniqueLabel.Position = UDim2.new(0, 0, 0, 0)
	uniqueLabel.BackgroundTransparency = 1
	uniqueLabel.Text = "‚ú® UNIQUE ‚ú®"
	uniqueLabel.TextColor3 = CLIENT_CONFIG.UNIQUE_ITEM_GLOW
	uniqueLabel.TextScaled = true
	uniqueLabel.Font = Enum.Font.SourceSansBold
	uniqueLabel.Parent = uniqueFrame

	-- Item name
	local itemName = Instance.new("TextLabel")
	itemName.Name = "ItemName"
	itemName.Size = UDim2.new(1, -10, 0, 30)
	itemName.Position = UDim2.new(0, 5, 0, 25)
	itemName.BackgroundTransparency = 1
	itemName.Text = "Mystery Item"
	itemName.TextColor3 = Color3.new(1, 1, 1)
	itemName.TextScaled = true
	itemName.Font = Enum.Font.SourceSans
	itemName.TextWrapped = true
	itemName.Parent = uniqueFrame

	-- Price display
	local priceLabel = Instance.new("TextLabel")
	priceLabel.Name = "PriceLabel"
	priceLabel.Size = UDim2.new(1, 0, 0, 25)
	priceLabel.Position = UDim2.new(0, 0, 0, 60)
	priceLabel.BackgroundTransparency = 1
	priceLabel.Text = "üí∞ 0"
	priceLabel.TextColor3 = CLIENT_CONFIG.AFFORDABLE_COLOR
	priceLabel.TextScaled = true
	priceLabel.Font = Enum.Font.SourceSansBold
	priceLabel.Parent = uniqueFrame

	-- Purchase button
	local purchaseButton = Instance.new("TextButton")
	purchaseButton.Name = "PurchaseButton"
	purchaseButton.Size = UDim2.new(1, -10, 0, 25)
	purchaseButton.Position = UDim2.new(0, 5, 0, 90)
	purchaseButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
	purchaseButton.Text = "BUY"
	purchaseButton.TextColor3 = Color3.new(1, 1, 1)
	purchaseButton.TextScaled = true
	purchaseButton.Font = Enum.Font.SourceSansBold
	purchaseButton.BorderSizePixel = 0
	purchaseButton.Parent = uniqueFrame

	local buttonCorner = Instance.new("UICorner")
	buttonCorner.CornerRadius = UDim.new(0, 6)
	buttonCorner.Parent = purchaseButton

	purchaseButton.MouseButton1Click:Connect(function()
		self:purchaseUniqueItem()
	end)

	self.uniqueItemUI = {
		screenGui = screenGui,
		uniqueFrame = uniqueFrame,
		glow = glow,
		itemName = itemName,
		priceLabel = priceLabel,
		purchaseButton = purchaseButton
	}

	-- Animate glow
	self:animateUniqueItemGlow()
end

-- ========================================================================
-- SHOP INTERACTION (Touch-Based)
-- ========================================================================

function ShopClientManager:receiveShopData(shopData)
	-- Store shop data and show UI
	self.currentShopData = shopData
	self:showShopUI()
	print("üè™ Received shop data, opening shop UI!")
end

function ShopClientManager:showShopUI()
	if not self.shopUI or not self.currentShopData then return end

	-- Request current coin count
	if self.remoteEvents.inventory then
		self.remoteEvents.inventory:FireServer("REQUEST_INVENTORY")
	end

	-- Update coin display
	self.shopUI.coinLabel.Text = "üí∞ " .. self.playerCoins

	-- Populate shop items from server data
	self:populateShopItemsFromData()

	-- Show UI with animation
	local mainFrame = self.shopUI.mainFrame
	mainFrame.Visible = true
	mainFrame.BackgroundTransparency = 1

	local tween = TweenService:Create(
		mainFrame,
		TweenInfo.new(CLIENT_CONFIG.UI_FADE_TIME, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
		{BackgroundTransparency = 0.1}
	)

	tween:Play()
end

-- Remove the old shop detection functions since we're using touch-based interaction
-- function ShopClientManager:setupShopDetection()
-- function ShopClientManager:detectNearbyShops()
-- function ShopClientManager:enterShop(shopRoom)
-- function ShopClientManager:exitShop()

-- ========================================================================
-- SHOP ITEM DISPLAY
-- ========================================================================

function ShopClientManager:hideShopUI()
	if not self.shopUI then return end

	local mainFrame = self.shopUI.mainFrame

	local tween = TweenService:Create(
		mainFrame,
		TweenInfo.new(CLIENT_CONFIG.UI_FADE_TIME),
		{BackgroundTransparency = 1}
	)

	tween:Play()

	tween.Completed:Connect(function()
		mainFrame.Visible = false
	end)
end

function ShopClientManager:populateShopItemsFromData()
	local itemsFrame = self.shopUI.itemsFrame

	-- Clear existing items
	for _, child in pairs(itemsFrame:GetChildren()) do
		if child:IsA("Frame") then
			child:Destroy()
		end
	end

	-- Create UI elements for each item from server data
	for i, itemData in pairs(self.currentShopData.items) do
		if not itemData.purchased then
			self:createShopItemUIFromData(itemData, i)
		end
	end

	-- Update canvas size
	local gridLayout = itemsFrame:FindFirstChildOfClass("UIGridLayout")
	if gridLayout then
		itemsFrame.CanvasSize = UDim2.new(0, 0, 0, gridLayout.AbsoluteContentSize.Y + 20)
	end
end

function ShopClientManager:createShopItemUIFromData(itemData, index)
	local itemsFrame = self.shopUI.itemsFrame

	-- Create item frame
	local itemFrame = Instance.new("Frame")
	itemFrame.Name = "ShopItem_" .. index
	itemFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	itemFrame.BorderSizePixel = 0
	itemFrame.LayoutOrder = index
	itemFrame.Parent = itemsFrame

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = itemFrame

	-- Rarity-based border
	local rarityColors = {
		COMMON = Color3.fromRGB(150, 150, 150),
		UNCOMMON = Color3.fromRGB(100, 200, 100),
		RARE = Color3.fromRGB(100, 100, 255),
		LEGENDARY = Color3.fromRGB(255, 165, 0),
		BLESSED = Color3.fromRGB(255, 215, 0),
		CURSED = Color3.fromRGB(200, 50, 200)
	}

	local border = Instance.new("UIStroke")
	border.Color = rarityColors[itemData.rarity] or rarityColors.COMMON
	border.Thickness = 2
	border.Parent = itemFrame

	-- Item icon/image area
	local iconFrame = Instance.new("Frame")
	iconFrame.Size = UDim2.new(0, 50, 0, 50)
	iconFrame.Position = UDim2.new(0, 5, 0, 5)
	iconFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	iconFrame.BorderSizePixel = 0
	iconFrame.Parent = itemFrame

	local iconCorner = Instance.new("UICorner")
	iconCorner.CornerRadius = UDim.new(0, 6)
	iconCorner.Parent = iconFrame

	-- Item icon text (can be replaced with ImageLabel later)
	local iconLabel = Instance.new("TextLabel")
	iconLabel.Size = UDim2.new(1, 0, 1, 0)
	iconLabel.BackgroundTransparency = 1
	iconLabel.Text = "üì¶"
	iconLabel.TextColor3 = rarityColors[itemData.rarity] or rarityColors.COMMON
	iconLabel.TextScaled = true
	iconLabel.Font = Enum.Font.SourceSans
	iconLabel.Parent = iconFrame

	-- Item name
	local nameLabel = Instance.new("TextLabel")
	nameLabel.Size = UDim2.new(1, -65, 0, 25)
	nameLabel.Position = UDim2.new(0, 60, 0, 5)
	nameLabel.BackgroundTransparency = 1
	nameLabel.Text = itemData.name
	nameLabel.TextColor3 = Color3.new(1, 1, 1)
	nameLabel.TextScaled = true
	nameLabel.Font = Enum.Font.SourceSansBold
	nameLabel.TextXAlignment = Enum.TextXAlignment.Left
	nameLabel.TextTruncate = Enum.TextTruncate.AtEnd
	nameLabel.Parent = itemFrame

	-- Item description
	local descLabel = Instance.new("TextLabel")
	descLabel.Size = UDim2.new(1, -65, 0, 20)
	descLabel.Position = UDim2.new(0, 60, 0, 30)
	descLabel.BackgroundTransparency = 1
	descLabel.Text = itemData.description
	descLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
	descLabel.TextScaled = true
	descLabel.Font = Enum.Font.SourceSans
	descLabel.TextXAlignment = Enum.TextXAlignment.Left
	descLabel.TextTruncate = Enum.TextTruncate.AtEnd
	descLabel.Parent = itemFrame

	-- Price label
	local priceLabel = Instance.new("TextLabel")
	priceLabel.Size = UDim2.new(0, 80, 0, 20)
	priceLabel.Position = UDim2.new(0, 60, 0, 55)
	priceLabel.BackgroundTransparency = 1
	priceLabel.Text = "üí∞ " .. itemData.price
	priceLabel.TextScaled = true
	priceLabel.Font = Enum.Font.SourceSans
	priceLabel.TextXAlignment = Enum.TextXAlignment.Left
	priceLabel.Parent = itemFrame

	-- Update price color based on affordability
	if self.playerCoins >= itemData.price then
		priceLabel.TextColor3 = CLIENT_CONFIG.AFFORDABLE_COLOR
	else
		priceLabel.TextColor3 = CLIENT_CONFIG.EXPENSIVE_COLOR
	end

	-- Purchase button
	local purchaseButton = Instance.new("TextButton")
	purchaseButton.Size = UDim2.new(0, 60, 0, 20)
	purchaseButton.Position = UDim2.new(1, -65, 0, 55)
	purchaseButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
	purchaseButton.Text = "BUY"
	purchaseButton.TextColor3 = Color3.new(1, 1, 1)
	purchaseButton.TextScaled = true
	purchaseButton.Font = Enum.Font.SourceSansBold
	purchaseButton.BorderSizePixel = 0
	purchaseButton.Parent = itemFrame

	local buttonCorner = Instance.new("UICorner")
	buttonCorner.CornerRadius = UDim.new(0, 4)
	buttonCorner.Parent = purchaseButton

	-- Disable button if can't afford
	if self.playerCoins < itemData.price then
		purchaseButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
		purchaseButton.Text = "BROKE"
	end

	purchaseButton.MouseButton1Click:Connect(function()
		if self.playerCoins >= itemData.price and not itemData.purchased then
			-- Fire purchase to server
			if self.remoteEvents.purchase then
				self.remoteEvents.purchase:FireServer(self.currentShopData.id, itemData.index)
			end
		end
	end)
end

-- ========================================================================
-- PURCHASE HANDLING
-- ========================================================================

function ShopClientManager:handlePurchaseSuccess(data)
	print("‚úÖ Purchase successful:", data.item, "for", data.price, "coins")
	print("‚ú® Item effects applied immediately!")

	-- Update coin count
	self.playerCoins = data.remainingCoins
	self:updateShopPrices()

	-- Mark item as purchased in current shop data
	if self.currentShopData and data.itemIndex then
		for _, itemData in pairs(self.currentShopData.items) do
			if itemData.index == data.itemIndex then
				itemData.purchased = true
				break
			end
		end
	end

	-- Play success effect
	self:playPurchaseSuccessEffect(data.item)

	-- Refresh shop UI to remove purchased item
	self:populateShopItemsFromData()
end

function ShopClientManager:handleInsufficientFunds(data)
	print("‚ùå Not enough coins! Need", data.needed, "more coins")

	-- Show insufficient funds notification
	local notification = Instance.new("ScreenGui")
	notification.Name = "InsufficientFundsNotification"
	notification.DisplayOrder = 300
	notification.Parent = playerGui

	local notifFrame = Instance.new("Frame")
	notifFrame.Size = UDim2.new(0, 300, 0, 60)
	notifFrame.Position = UDim2.new(0.5, -150, 0, 100)
	notifFrame.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
	notifFrame.BorderSizePixel = 0
	notifFrame.Parent = notification

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 10)
	corner.Parent = notifFrame

	local insufficientLabel = Instance.new("TextLabel")
	insufficientLabel.Size = UDim2.new(1, 0, 1, 0)
	insufficientLabel.BackgroundTransparency = 1
	insufficientLabel.Text = "‚ùå Need " .. data.needed .. " more coins!"
	insufficientLabel.TextColor3 = Color3.new(1, 1, 1)
	insufficientLabel.TextScaled = true
	insufficientLabel.Font = Enum.Font.SourceSansBold
	insufficientLabel.Parent = notifFrame

	-- Animate notification
	notifFrame.Position = UDim2.new(0.5, -150, 0, 30)

	local slideIn = TweenService:Create(
		notifFrame,
		TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
		{Position = UDim2.new(0.5, -150, 0, 100)}
	)

	slideIn:Play()

	-- Auto-remove notification
	spawn(function()
		task.wait(2)

		local slideOut = TweenService:Create(
			notifFrame,
			TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In),
			{Position = UDim2.new(0.5, -150, 0, 30)}
		)

		slideOut:Play()
		slideOut.Completed:Wait()
		notification:Destroy()
	end)
end

function ShopClientManager:playPurchaseSuccessEffect(itemName)
	-- Create success notification
	local notification = Instance.new("ScreenGui")
	notification.Name = "PurchaseNotification"
	notification.DisplayOrder = 200
	notification.Parent = playerGui

	local notifFrame = Instance.new("Frame")
	notifFrame.Size = UDim2.new(0, 300, 0, 80)
	notifFrame.Position = UDim2.new(0.5, -150, 0, 50)
	notifFrame.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
	notifFrame.BorderSizePixel = 0
	notifFrame.Parent = notification

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 10)
	corner.Parent = notifFrame

	local successLabel = Instance.new("TextLabel")
	successLabel.Size = UDim2.new(1, 0, 0.6, 0)
	successLabel.BackgroundTransparency = 1
	successLabel.Text = "‚úÖ Purchase Successful!"
	successLabel.TextColor3 = Color3.new(1, 1, 1)
	successLabel.TextScaled = true
	successLabel.Font = Enum.Font.SourceSansBold
	successLabel.Parent = notifFrame

	local itemLabel = Instance.new("TextLabel")
	itemLabel.Size = UDim2.new(1, 0, 0.4, 0)
	itemLabel.Position = UDim2.new(0, 0, 0.6, 0)
	itemLabel.BackgroundTransparency = 1
	itemLabel.Text = "‚ú® " .. itemName .. " effects applied!"
	itemLabel.TextColor3 = Color3.new(1, 1, 1)
	itemLabel.TextScaled = true
	itemLabel.Font = Enum.Font.SourceSans
	itemLabel.Parent = notifFrame

	-- Animate notification
	notifFrame.Position = UDim2.new(0.5, -150, 0, -90)

	local slideIn = TweenService:Create(
		notifFrame,
		TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
		{Position = UDim2.new(0.5, -150, 0, 50)}
	)

	slideIn:Play()

	-- Auto-remove notification
	spawn(function()
		task.wait(3)

		local slideOut = TweenService:Create(
			notifFrame,
			TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In),
			{Position = UDim2.new(0.5, -150, 0, -90)}
		)

		slideOut:Play()
		slideOut.Completed:Wait()
		notification:Destroy()
	end)
end

-- ========================================================================
-- UNIQUE ITEM SYSTEM
-- ========================================================================

function ShopClientManager:receiveUniqueItem(data)
	self.uniqueItemData = data
	self:showUniqueItemUI()
end

function ShopClientManager:showUniqueItemUI()
	if not self.uniqueItemUI or not self.uniqueItemData then return end

	local uniqueFrame = self.uniqueItemUI.uniqueFrame
	local itemName = self.uniqueItemUI.itemName
	local priceLabel = self.uniqueItemUI.priceLabel
	local purchaseButton = self.uniqueItemUI.purchaseButton

	-- Update UI with unique item data
	itemName.Text = self.uniqueItemData.itemData.name or "Mystery Item"
	priceLabel.Text = "üí∞ " .. self.uniqueItemData.price

	-- Update price color
	if self.playerCoins >= self.uniqueItemData.price then
		priceLabel.TextColor3 = CLIENT_CONFIG.AFFORDABLE_COLOR
		purchaseButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
		purchaseButton.Text = "BUY"
	else
		priceLabel.TextColor3 = CLIENT_CONFIG.EXPENSIVE_COLOR
		purchaseButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
		purchaseButton.Text = "BROKE"
	end

	-- Show with animation
	uniqueFrame.Visible = true
	uniqueFrame.BackgroundTransparency = 1

	local tween = TweenService:Create(
		uniqueFrame,
		TweenInfo.new(CLIENT_CONFIG.UI_FADE_TIME, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
		{BackgroundTransparency = 0.2}
	)

	tween:Play()
end

function ShopClientManager:hideUniqueItemUI()
	if not self.uniqueItemUI then return end

	local uniqueFrame = self.uniqueItemUI.uniqueFrame

	local tween = TweenService:Create(
		uniqueFrame,
		TweenInfo.new(CLIENT_CONFIG.UI_FADE_TIME),
		{BackgroundTransparency = 1}
	)

	tween:Play()

	tween.Completed:Connect(function()
		uniqueFrame.Visible = false
	end)
end

function ShopClientManager:purchaseUniqueItem()
	if not self.uniqueItemData then return end

	if self.playerCoins >= self.uniqueItemData.price then
		print("üíé Purchasing unique item:", self.uniqueItemData.itemData.name)

		-- Simulate purchasing the unique item (client-side only)
		self.playerCoins = self.playerCoins - self.uniqueItemData.price

		-- Update UI
		self:updateShopPrices()

		-- Hide unique item
		self:hideUniqueItemUI()

		-- Play purchase effect
		self:playUniqueItemPurchaseEffect()

		-- TODO: Actually give the item to the player
		-- This would integrate with your item effects system
		print("‚ú® You received:", self.uniqueItemData.itemData.name)
	end
end

function ShopClientManager:animateUniqueItemGlow()
	if not self.uniqueItemUI then return end

	local glow = self.uniqueItemUI.glow

	spawn(function()
		while self.uniqueItemUI.screenGui.Parent do
			-- Fade glow in and out
			local tweenIn = TweenService:Create(
				glow,
				TweenInfo.new(CLIENT_CONFIG.UNIQUE_ITEM_GLOW_TIME / 2, Enum.EasingStyle.Sine),
				{Transparency = 0.3}
			)

			local tweenOut = TweenService:Create(
				glow,
				TweenInfo.new(CLIENT_CONFIG.UNIQUE_ITEM_GLOW_TIME / 2, Enum.EasingStyle.Sine),
				{Transparency = 0}
			)

			tweenIn:Play()
			tweenIn.Completed:Wait()
			tweenOut:Play()
			tweenOut.Completed:Wait()
		end
	end)
end

function ShopClientManager:playUniqueItemPurchaseEffect()
	-- Create sparkle effect on screen
	local effectGui = Instance.new("ScreenGui")
	effectGui.Name = "PurchaseEffect"
	effectGui.DisplayOrder = 1000
	effectGui.Parent = playerGui

	-- Create multiple sparkles
	for i = 1, 10 do
		local sparkle = Instance.new("Frame")
		sparkle.Size = UDim2.new(0, 20, 0, 20)
		sparkle.Position = UDim2.new(
			math.random(20, 80) / 100,
			0,
			math.random(20, 80) / 100,
			0
		)
		sparkle.BackgroundColor3 = CLIENT_CONFIG.UNIQUE_ITEM_GLOW
		sparkle.BorderSizePixel = 0
		sparkle.Parent = effectGui

		local corner = Instance.new("UICorner")
		corner.CornerRadius = UDim.new(0.5, 0)
		corner.Parent = sparkle

		-- Animate sparkle
		local tween = TweenService:Create(
			sparkle,
			TweenInfo.new(1, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
			{
				Size = UDim2.new(0, 5, 0, 5),
				BackgroundTransparency = 1
			}
		)

		tween:Play()
	end

	-- Clean up effect
	spawn(function()
		task.wait(2)
		effectGui:Destroy()
	end)
end

-- ========================================================================
-- UTILITY FUNCTIONS
-- ========================================================================

function ShopClientManager:updateShopPrices()
	if not self.shopUI or not self.shopUI.mainFrame.Visible then return end

	-- Update coin display
	self.shopUI.coinLabel.Text = "üí∞ " .. self.playerCoins

	-- Update item affordability in current shop data
	if self.currentShopData then
		self:populateShopItemsFromData() -- Refresh the entire UI with updated affordability
	end

	-- Update unique item
	if self.uniqueItemUI and self.uniqueItemData then
		local priceLabel = self.uniqueItemUI.priceLabel
		local purchaseButton = self.uniqueItemUI.purchaseButton

		if self.playerCoins >= self.uniqueItemData.price then
			priceLabel.TextColor3 = CLIENT_CONFIG.AFFORDABLE_COLOR
			purchaseButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
			purchaseButton.Text = "BUY"
		else
			priceLabel.TextColor3 = CLIENT_CONFIG.EXPENSIVE_COLOR
			purchaseButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
			purchaseButton.Text = "BROKE"
		end
	end
end

function ShopClientManager:setupInputHandling()
	-- ESC key to close shop UI
	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end

		if input.KeyCode == Enum.KeyCode.Escape then
			if self.shopUI and self.shopUI.mainFrame.Visible then
				self:hideShopUI()
			end
		end
	end)
end

-- ========================================================================
-- GLOBAL SETUP AND DEBUG
-- ========================================================================

-- Create global instance
local shopClientInstance = ShopClientManager.new()
_G.ShopClient = shopClientInstance

-- Debug functions
_G.ShowShopUI = function()
	if shopClientInstance.shopUI then
		shopClientInstance.shopUI.mainFrame.Visible = true
		shopClientInstance.shopUI.mainFrame.BackgroundTransparency = 0.1
	end
end

_G.HideShopUI = function()
	shopClientInstance:hideShopUI()
end

_G.TestUniqueItem = function()
	local testData = {
		itemId = "test_item",
		itemData = {
			name = "Test Unique Item",
			rarity = "LEGENDARY"
		},
		price = 25,
		isUnique = true
	}
	shopClientInstance:receiveUniqueItem(testData)
end

_G.SetTestCoins = function(amount)
	shopClientInstance.playerCoins = amount or 100
	shopClientInstance:updateShopPrices()
	print("üí∞ Set coins to:", shopClientInstance.playerCoins)
end

print("üè™ Shop Client System loaded successfully!")
print("üìã Features:")
print("  ‚úÖ Automatic shop detection and UI display")
print("  ‚úÖ Real-time coin tracking and affordability")
print("  ‚úÖ Unique item display (client-side only)")
print("  ‚úÖ Purchase animations and effects")
print("  ‚úÖ Responsive UI with proper scaling")
print("  ‚úÖ ESC key to close shop")
print("")
print("üîß Debug Commands:")
print("  _G.ShowShopUI() - Force show shop interface")
print("  _G.HideShopUI() - Force hide shop interface")
print("  _G.TestUniqueItem() - Show test unique item")
print("  _G.SetTestCoins(amount) - Set test coin amount")
print("")
print("üéÆ Walk near a shop booth to automatically open the shop interface!")

return ShopClientManager
