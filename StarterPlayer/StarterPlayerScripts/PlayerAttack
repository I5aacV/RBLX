-- ========================================================================
-- FIXED ISOMETRIC ATTACK SCRIPT - INTEGRATED WITH ITEM SYSTEM
-- Enhanced version of your existing script with stats and item integration
-- Place in StarterPlayerScripts (replaces existing PlayerAttack)
-- ========================================================================

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CollectionService = game:GetService("CollectionService")
local Debris = game:GetService("Debris")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- ========================================================================
-- REMOTE EVENTS SETUP
-- ========================================================================

-- Main shooting remote (keeping your existing one)
local shootRemote = ReplicatedStorage:FindFirstChild("IsaacShootRemote")
if not shootRemote then
	shootRemote = Instance.new("RemoteEvent")
	shootRemote.Name = "IsaacShootRemote"
	shootRemote.Parent = ReplicatedStorage
end

-- Stats update event from ItemEffects
local statsUpdateEvent = ReplicatedStorage:FindFirstChild("UpdatePlayerStats")

-- ========================================================================
-- CONFIGURATION (Enhanced with Item Integration)
-- ========================================================================

local CONFIG = {
	-- Base stats (will be modified by items)
	damage = 10,
	speed = 50,
	fireRate = 0.3,
	maxRange = 20,

	-- Visual settings
	projectileSize = Vector3.new(1, 1, 1),
	projectileColor = Color3.fromRGB(100, 150, 255),
	shootingHeight = 2,
	gravityStrength = 50,

	-- Special effects (set by items)
	piercing = false,
	homing = false,
	explosive = false,
	spectral = false,
	tripleShot = false,
	quadShot = false,
	laserTears = false
}

-- Track current player stats from ItemEffects
local playerStats = {
	damage = CONFIG.damage,
	fireRate = CONFIG.fireRate,
	shotSpeed = CONFIG.speed,
	range = CONFIG.maxRange,

	-- Special abilities from items
	hasPiercingTears = false,
	hasHomingTears = false,
	hasExplosiveTears = false,
	hasSpectralTears = false,
	tripleShot = false,
	quadShot = false,
	laserTears = false
}

local lastShotTime = 0
local aimIndicator = nil
local aimLine = nil

-- ========================================================================
-- STATS INTEGRATION WITH ITEMEFFECTS
-- ========================================================================

-- Listen for stats updates from server
if statsUpdateEvent then
	statsUpdateEvent.OnClientEvent:Connect(function(newStats)
		if not newStats then return end

		-- Update damage calculation
		playerStats.damage = newStats.damage or CONFIG.damage

		-- Update fire rate (lower = faster shooting)
		local fireRateBonus = newStats.fireRate or 0
		playerStats.fireRate = math.max(0.05, CONFIG.fireRate * (1 / (1 + fireRateBonus)))

		-- Update shot speed
		playerStats.shotSpeed = CONFIG.speed + ((newStats.shotSpeed or 0) * 5)

		-- Update range
		playerStats.range = CONFIG.maxRange + ((newStats.range or 0) * 2)

		-- Update special abilities
		playerStats.hasPiercingTears = newStats.hasPiercingTears or false
		playerStats.hasHomingTears = newStats.hasHomingTears or false
		playerStats.hasExplosiveTears = newStats.hasExplosiveTears or false
		playerStats.hasSpectralTears = newStats.hasSpectralTears or false
		playerStats.tripleShot = newStats.tripleShot or false
		playerStats.quadShot = newStats.quadShot or false
		playerStats.laserTears = newStats.laserTears or false

		print("ðŸŽ¯ Updated attack stats - Damage:", playerStats.damage, "Fire Rate:", string.format("%.2f", playerStats.fireRate))
	end)
end

-- ========================================================================
-- UTILITIES (Your existing functions enhanced)
-- ========================================================================

-- Raycast from mouse to ground with dynamic range from stats
local function getMouseWorldGroundPosition()
	local mousePos = UserInputService:GetMouseLocation()
	local ray = camera:ViewportPointToRay(mousePos.X, mousePos.Y)
	local origin = ray.Origin
	local direction = ray.Direction
	local planeY = 0

	if math.abs(direction.Y) < 1e-4 then return nil end

	local t = (planeY - origin.Y) / direction.Y
	if t < 0 then return nil end

	local worldPos = origin + direction * t

	-- Use dynamic range from player stats
	if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
		local charPos = player.Character.HumanoidRootPart.Position
		local distance = ((Vector3.new(worldPos.X, 0, worldPos.Z) - Vector3.new(charPos.X, 0, charPos.Z)).Magnitude)

		if distance > playerStats.range then
			-- Clamp to max range in the same direction
			local direction2D = (Vector3.new(worldPos.X, 0, worldPos.Z) - Vector3.new(charPos.X, 0, charPos.Z)).Unit
			worldPos = Vector3.new(charPos.X, 0, charPos.Z) + direction2D * playerStats.range
		end
	end

	return worldPos
end

-- Enhanced visual indicators (your existing functions)
local function spawnDebugLine(position)
	local part = Instance.new("Part")
	part.Anchored = true
	part.CanCollide = false
	part.Size = Vector3.new(2, 0.1, 0.2)
	part.Position = Vector3.new(position.X, 0.05, position.Z)
	part.Color = Color3.fromRGB(255, 0, 0)
	part.Material = Enum.Material.Neon
	part.Name = "ClickLine"
	part.Parent = workspace

	if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
		local root = player.Character.HumanoidRootPart
		local from = Vector3.new(root.Position.X, 0, root.Position.Z)
		local to = Vector3.new(position.X, 0, position.Z)
		local dir = (to - from).Unit
		part.CFrame = CFrame.new(from:Lerp(to, 0.5), from + dir) * CFrame.Angles(0, math.pi / 2, 0)
	end

	Debris:AddItem(part, 2)
end

local function createAimIndicator()
	if aimIndicator then return end

	aimIndicator = Instance.new("Part")
	aimIndicator.Anchored = true
	aimIndicator.CanCollide = false
	aimIndicator.Shape = Enum.PartType.Cylinder
	aimIndicator.Size = Vector3.new(4, 0.1, 4)
	aimIndicator.Color = Color3.fromRGB(0, 255, 0)
	aimIndicator.Material = Enum.Material.Neon
	aimIndicator.Name = "AimRing"
	aimIndicator.Parent = workspace

	local light = Instance.new("PointLight")
	light.Color = aimIndicator.Color
	light.Brightness = 2
	light.Range = 6
	light.Parent = aimIndicator
end

local function updateAimIndicator(position)
	if not aimIndicator then createAimIndicator() end
	local pos = Vector3.new(position.X, 0.05, position.Z)
	aimIndicator.Position = pos
	aimIndicator.CFrame = CFrame.new(pos) * CFrame.Angles(math.rad(90), 0, 0)
end

local function updateAimLine(from, to)
	if not aimLine then
		aimLine = Instance.new("Part")
		aimLine.Anchored = true
		aimLine.CanCollide = false
		aimLine.Material = Enum.Material.Neon
		aimLine.Color = Color3.fromRGB(0, 255, 0)
		aimLine.Size = Vector3.new(0.15, 0.15, 1)
		aimLine.Name = "AimLine"
		aimLine.Parent = workspace
	end

	local distance = (to - from).Magnitude
	local midpoint = (from + to) / 2
	local direction = (to - from).Unit

	aimLine.Size = Vector3.new(0.15, 0.15, distance)
	aimLine.CFrame = CFrame.new(midpoint, midpoint + direction)
end

-- ========================================================================
-- ENHANCED PROJECTILE CREATION WITH ITEM EFFECTS
-- ========================================================================

local function createProjectileVisual(startPos, targetPos)
	local projectile = Instance.new("Part")
	projectile.Name = "PlayerProjectile"
	projectile.Size = CONFIG.projectileSize
	projectile.Shape = Enum.PartType.Ball
	projectile.Material = Enum.Material.Neon
	projectile.CanCollide = false
	projectile.Anchored = true
	projectile.Position = startPos
	projectile.Parent = workspace

	-- Color based on special effects
	if playerStats.hasExplosiveTears then
		projectile.Color = Color3.fromRGB(255, 100, 0) -- Orange for explosive
	elseif playerStats.hasPiercingTears then
		projectile.Color = Color3.fromRGB(255, 255, 0) -- Yellow for piercing
	elseif playerStats.hasSpectralTears then
		projectile.Color = Color3.fromRGB(200, 200, 255) -- Light blue for spectral
	else
		projectile.Color = CONFIG.projectileColor
	end

	-- Enhanced visual effects for special tears
	local light = Instance.new("PointLight")
	light.Color = projectile.Color
	light.Brightness = playerStats.hasExplosiveTears and 3 or 2
	light.Range = playerStats.hasExplosiveTears and 8 or 5
	light.Parent = projectile

	-- Trail effect
	local attachment = Instance.new("Attachment")
	attachment.Parent = projectile

	local trail = Instance.new("Trail")
	trail.Attachment0 = attachment
	trail.Attachment1 = attachment
	trail.Color = ColorSequence.new(projectile.Color)
	trail.Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 0.5),
		NumberSequenceKeypoint.new(1, 1)
	})
	trail.Lifetime = 0.5
	trail.Parent = projectile

	return projectile
end

local function createTravelingProjectile(startPos, initialDirection, targetPos)
	-- Create multiple projectiles for special shot patterns
	local projectilesToCreate = 1
	local angleSpread = 0

	if playerStats.tripleShot then
		projectilesToCreate = 3
		angleSpread = math.rad(15)
	elseif playerStats.quadShot then
		projectilesToCreate = 4
		angleSpread = math.rad(12)
	end

	for i = 1, projectilesToCreate do
		-- Calculate target for each projectile (spread pattern)
		local projectileTargetPos = targetPos

		if projectilesToCreate > 1 then
			local spreadOffset = angleSpread * (i - (projectilesToCreate + 1) / 2)
			local spreadDirection = CFrame.Angles(0, spreadOffset, 0) * (targetPos - startPos).Unit
			local spreadDistance = (targetPos - startPos).Magnitude * 0.8 -- Slightly closer for spread
			projectileTargetPos = startPos + spreadDirection * spreadDistance
			projectileTargetPos = Vector3.new(projectileTargetPos.X, 0, projectileTargetPos.Z) -- Keep on ground
		end

		local projectile = createProjectileVisual(startPos, projectileTargetPos)

		-- YOUR EXACT BALLISTIC TRAJECTORY MATH
		local startTime = tick()
		local lastPosition = startPos
		local hasHit = false

		-- Calculate initial velocity for ballistic trajectory (YOUR MATH)
		local horizontalDistance = ((Vector3.new(projectileTargetPos.X, 0, projectileTargetPos.Z) - Vector3.new(startPos.X, 0, startPos.Z)).Magnitude)
		local heightDifference = projectileTargetPos.Y - startPos.Y
		local timeToTarget = horizontalDistance / playerStats.shotSpeed

		-- YOUR EXACT INITIAL VELOCITY CALCULATION
		local initialVelocity = Vector3.new(
			(projectileTargetPos.X - startPos.X) / timeToTarget,
			(heightDifference / timeToTarget) + (CONFIG.gravityStrength * timeToTarget * 0.5),
			(projectileTargetPos.Z - startPos.Z) / timeToTarget
		)

		local connection
		connection = RunService.Heartbeat:Connect(function()
			local elapsed = tick() - startTime

			-- YOUR EXACT TIMEOUT CHECK
			if elapsed > timeToTarget + 1 then
				connection:Disconnect()
				if projectile.Parent then projectile:Destroy() end
				return
			end

			-- YOUR EXACT BALLISTIC MOTION WITH GRAVITY
			local currentVelocity = Vector3.new(
				initialVelocity.X,
				initialVelocity.Y - CONFIG.gravityStrength * elapsed,
				initialVelocity.Z
			)

			local newPos = startPos + Vector3.new(
				initialVelocity.X * elapsed,
				initialVelocity.Y * elapsed - 0.5 * CONFIG.gravityStrength * elapsed * elapsed,
				initialVelocity.Z * elapsed
			)

			-- YOUR EXACT GROUND HIT CHECK
			if newPos.Y <= projectileTargetPos.Y + 0.1 and not hasHit then
				hasHit = true

				-- Enhanced hit effect based on item effects
				if playerStats.hasExplosiveTears then
					local explosion = Instance.new("Explosion")
					explosion.Position = projectileTargetPos
					explosion.BlastRadius = 5
					explosion.BlastPressure = 0
					explosion.Parent = workspace
				else
					local explosion = Instance.new("Explosion")
					explosion.Position = projectileTargetPos
					explosion.BlastRadius = 3
					explosion.BlastPressure = 0
					explosion.Parent = workspace
				end

				-- Send hit to server with enhanced data (using your server's exact format)
				shootRemote:FireServer(nil, playerStats.damage, projectileTargetPos)

				connection:Disconnect()
				if projectile.Parent then projectile:Destroy() end
				return
			end

			-- YOUR EXACT COLLISION DETECTION DURING FLIGHT
			if not hasHit then
				local rayDirection = newPos - lastPosition
				local rayParams = RaycastParams.new()
				rayParams.FilterType = Enum.RaycastFilterType.Blacklist
				rayParams.FilterDescendantsInstances = {
					player.Character,
					projectile,
					workspace:FindFirstChild("Baseplate")
				}

				local result = workspace:Raycast(lastPosition, rayDirection, rayParams)
				if result and result.Instance then
					local hitPart = result.Instance
					local hitPosition = result.Position

					-- YOUR EXACT ENEMY DETECTION FROM PlayerAttackOLD
					if hitPart and hitPart.Parent then
						local humanoid = hitPart.Parent:FindFirstChild("Humanoid")

						if humanoid and (
							CollectionService:HasTag(hitPart.Parent, "RoomEnemy") or
								string.find(string.lower(hitPart.Parent.Name or ""), "enemy") or
								string.find(string.lower(hitPart.Parent.Name or ""), "fly") or
								string.find(string.lower(hitPart.Parent.Name or ""), "spider") or
								string.find(string.lower(hitPart.Parent.Name or ""), "gaper")
							) then
							hasHit = true
							print("ðŸŽ¯ Projectile hit enemy:", hitPart.Parent.Name)

							-- Send hit to server (YOUR EXACT FORMAT from PlayerAttackOLD)
							shootRemote:FireServer(humanoid, playerStats.damage, hitPosition)

							-- Move projectile to hit position and create effect (YOUR EXACT METHOD)
							projectile.Position = hitPosition

							-- Enhanced hit effect based on items
							if playerStats.hasExplosiveTears then
								local effect = Instance.new("Explosion")
								effect.Position = hitPosition
								effect.BlastRadius = 4
								effect.BlastPressure = 0
								effect.Parent = workspace
							else
								local effect = Instance.new("Explosion")
								effect.Position = hitPosition
								effect.BlastRadius = 3
								effect.BlastPressure = 0
								effect.Parent = workspace
							end

							-- YOUR EXACT CLEANUP METHOD
							task.wait(0.1)
							connection:Disconnect()
							if projectile.Parent then
								projectile:Destroy()
							end

							-- Exit early for non-piercing (like your original)
							if not playerStats.hasPiercingTears then
								return
							end
						end
					end

					-- Hit wall/obstacle (spectral tears pass through)
					if not playerStats.hasSpectralTears and hitPart:IsA("BasePart") and hitPart.Name ~= "Baseplate" then
						hasHit = true

						-- Move projectile and show effect (YOUR METHOD)
						projectile.Position = hitPosition

						-- Small effect for hitting walls
						local effect = Instance.new("Explosion")
						effect.Position = hitPosition
						effect.BlastRadius = 1
						effect.BlastPressure = 0
						effect.Parent = workspace

						task.wait(0.1)
						connection:Disconnect()
						if projectile.Parent then
							projectile:Destroy()
						end
						return
					end
				end
			end

			-- YOUR EXACT POSITION UPDATE
			projectile.Position = newPos
			lastPosition = newPos
		end)
	end
end

-- ========================================================================
-- ENHANCED SHOOT FUNCTION
-- ========================================================================

local function shoot()
	local currentTime = tick()
	if currentTime - lastShotTime < playerStats.fireRate then return end

	local character = player.Character
	if not character or not character:FindFirstChild("HumanoidRootPart") then return end

	local root = character.HumanoidRootPart
	local groundTarget = getMouseWorldGroundPosition()
	if not groundTarget then return end

	-- Shooting position
	local shootingPos = root.Position + Vector3.new(0, CONFIG.shootingHeight, 0)
	local targetPos = Vector3.new(groundTarget.X, 0, groundTarget.Z)
	local initialDirection = (targetPos - shootingPos).Unit

	-- Update visuals
	updateAimIndicator(groundTarget)
	updateAimLine(Vector3.new(root.Position.X, 0.05, root.Position.Z), Vector3.new(groundTarget.X, 0.05, groundTarget.Z))
	spawnDebugLine(groundTarget)

	-- Create enhanced projectile(s)
	createTravelingProjectile(shootingPos, initialDirection, targetPos)

	lastShotTime = currentTime

	print("ðŸŽ¯ Enhanced shot - Damage:", playerStats.damage, "Range:", math.floor(((targetPos - Vector3.new(root.Position.X, 0, root.Position.Z)).Magnitude)), "studs")
end

-- ========================================================================
-- INPUT AND UPDATES
-- ========================================================================

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		shoot()
	end
end)

-- Update aim indicators
RunService.Heartbeat:Connect(function()
	local target = getMouseWorldGroundPosition()
	if target and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
		local root = player.Character.HumanoidRootPart
		local from = Vector3.new(root.Position.X, 0.05, root.Position.Z)
		local to = Vector3.new(target.X, 0.05, target.Z)
		updateAimIndicator(to)
		updateAimLine(from, to)
	end
end)

print("âœ… Enhanced Player Attack Script Loaded with Item Integration!")
print("ðŸŽ¯ Dynamic stats from ItemEffects system")
print("âš¡ Fire rate, damage, range affected by items")
print("ðŸŒŸ Special effects: piercing, explosive, spectral tears")
print("ðŸŽ® Multi-shot patterns: triple shot, quad shot")
print("ðŸ”— Integrated with existing enemy damage systems")
