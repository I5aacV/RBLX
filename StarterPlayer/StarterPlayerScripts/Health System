-- ========================================================================
-- FIXED HEART SYSTEM WITH ITEM INTEGRATION
-- Replace your StarterPlayerScripts/Health System with this
-- ========================================================================

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Configuration
local HEARTS_PER_ROW = 6  -- Hearts per row before wrapping
local HEART_SIZE = UDim2.new(0, 32, 0, 32)  -- Size of each heart
local HEART_PADDING = 2  -- Padding between hearts

-- ========================================================================
-- CREATE REMOTEEVENTS FOR HEALTH COMMUNICATION
-- ========================================================================

-- Wait for or create RemoteEvents
local healthUpdateEvent = ReplicatedStorage:FindFirstChild("UpdatePlayerHealth")
if not healthUpdateEvent then
	healthUpdateEvent = Instance.new("RemoteEvent")
	healthUpdateEvent.Name = "UpdatePlayerHealth"
	healthUpdateEvent.Parent = ReplicatedStorage
end

local spikeHeartDamageEvent = ReplicatedStorage:WaitForChild("SpikeHeartDamage")

-- ========================================================================
-- HEART SYSTEM CLASS (UPDATED)
-- ========================================================================

local HeartSystem = {}
HeartSystem.__index = HeartSystem

function HeartSystem.new()
	local self = setmetatable({}, HeartSystem)

	-- Dynamic heart system (starts with defaults, updates from server)
	self.maxHearts = 3  -- Will be updated by server
	self.currentHits = 6  -- Will be updated by server (6 = 3 hearts * 2 hits each)
	self.heartFrames = {}
	self.gui = nil

	-- I-FRAME PROPERTIES
	self.isInvincible = false
	self.iframeTime = 0.75
	self.iframeFlashSpeed = 0.1

	self:createGUI()
	self:connectHealthEvents()
	self:connectItemSystemEvents()  -- NEW: Connect to item system

	return self
end

-- ========================================================================
-- NEW: ITEM SYSTEM INTEGRATION
-- ========================================================================

function HeartSystem:connectItemSystemEvents()
	-- Listen for health updates from server (when items change health)
	healthUpdateEvent.OnClientEvent:Connect(function(newMaxHearts, newCurrentHits)
		print("🔄 Received health update from server:")
		print("  Max Hearts:", self.maxHearts, "→", newMaxHearts)
		print("  Current Hits:", self.currentHits, "→", newCurrentHits)

		self:updateFromServer(newMaxHearts, newCurrentHits)
	end)

	print("✅ Heart system connected to item effects")
end

function HeartSystem:updateFromServer(newMaxHearts, newCurrentHits)
	local oldMaxHearts = self.maxHearts

	-- Update our values
	self.maxHearts = newMaxHearts
	self.currentHits = newCurrentHits

	-- If max hearts changed, we need to recreate the UI
	if newMaxHearts ~= oldMaxHearts then
		print("💖 Max hearts changed! Recreating heart UI...")
		self:recreateHeartUI()
	else
		-- Just update the display
		self:updateHeartDisplay()
	end

	-- Animate the change
	if newMaxHearts > oldMaxHearts then
		-- Heart gained animation
		self:animateHeartGain(oldMaxHearts, newMaxHearts)
	end
end

-- ========================================================================
-- DYNAMIC UI CREATION
-- ========================================================================

function HeartSystem:recreateHeartUI()
	-- Clear existing hearts
	for _, heartFrame in pairs(self.heartFrames) do
		heartFrame:Destroy()
	end
	self.heartFrames = {}

	-- Create new hearts based on current max
	for i = 1, self.maxHearts do
		local heartFrame = self:createHeartFrame(i)
		heartFrame.Parent = self.mainFrame
		table.insert(self.heartFrames, heartFrame)
	end

	-- Update frame size to fit all hearts
	self:updateMainFrameSize()

	-- Update display
	self:updateHeartDisplay()

	print("💖 Recreated heart UI with", self.maxHearts, "hearts")
end

function HeartSystem:updateMainFrameSize()
	-- Calculate required size based on number of hearts
	local rows = math.ceil(self.maxHearts / HEARTS_PER_ROW)
	local cols = math.min(self.maxHearts, HEARTS_PER_ROW)

	local width = cols * (HEART_SIZE.X.Offset + HEART_PADDING) - HEART_PADDING + 20
	local height = rows * (HEART_SIZE.Y.Offset + HEART_PADDING) - HEART_PADDING + 20

	self.mainFrame.Size = UDim2.new(0, width, 0, height)

	print("📏 Updated main frame size:", width, "x", height, "for", self.maxHearts, "hearts")
end

-- ========================================================================
-- HEART GAIN ANIMATION
-- ========================================================================

function HeartSystem:animateHeartGain(oldMax, newMax)
	-- Animate the new hearts appearing
	for i = oldMax + 1, newMax do
		if self.heartFrames[i] then
			local heartFrame = self.heartFrames[i]

			-- Start invisible and small
			heartFrame.Size = UDim2.new(0, 0, 0, 0)

			-- Animate to full size
			local tween = TweenService:Create(heartFrame,
				TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
				{Size = HEART_SIZE}
			)

			tween:Play()

			-- Add sparkle effect
			task.spawn(function()
				task.wait((i - oldMax - 1) * 0.1) -- Stagger the animations
				tween:Play()

				-- Flash gold briefly
				local filledHeart = heartFrame:FindFirstChild("FilledHeart")
				if filledHeart then
					local originalColor = filledHeart.ImageColor3
					filledHeart.ImageColor3 = Color3.fromRGB(255, 215, 0) -- Gold

					task.wait(0.3)
					filledHeart.ImageColor3 = originalColor
				end
			end)
		end
	end

	print("✨ Animated", newMax - oldMax, "new hearts")
end

-- ========================================================================
-- ORIGINAL HEART SYSTEM CODE (PRESERVED)
-- ========================================================================

function HeartSystem:createGUI()
	-- Create main GUI
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "HeartSystemGUI"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = playerGui

	-- Create main frame (will be resized dynamically)
	local mainFrame = Instance.new("Frame")
	mainFrame.Name = "HeartFrame"
	mainFrame.Size = UDim2.new(0, 200, 0, 100)
	mainFrame.Position = UDim2.new(0, 10, 0, 10)
	mainFrame.BackgroundTransparency = 1
	mainFrame.Parent = screenGui

	self.gui = screenGui
	self.mainFrame = mainFrame

	-- Create initial hearts (will be recreated when max changes)
	for i = 1, self.maxHearts do
		local heartFrame = self:createHeartFrame(i)
		heartFrame.Parent = mainFrame
		table.insert(self.heartFrames, heartFrame)
	end

	self:updateHeartDisplay()
end

function HeartSystem:createHeartFrame(index)
	local heartFrame = Instance.new("Frame")
	heartFrame.Name = "Heart" .. index
	heartFrame.Size = HEART_SIZE
	heartFrame.BackgroundTransparency = 1

	-- Calculate position (grid layout)
	local row = math.floor((index - 1) / HEARTS_PER_ROW)
	local col = (index - 1) % HEARTS_PER_ROW

	local xPos = col * (HEART_SIZE.X.Offset + HEART_PADDING)
	local yPos = row * (HEART_SIZE.Y.Offset + HEART_PADDING)

	heartFrame.Position = UDim2.new(0, xPos, 0, yPos)

	-- Create heart image (filled/full)
	local filledHeart = Instance.new("ImageLabel")
	filledHeart.Name = "FilledHeart"
	filledHeart.Size = UDim2.new(1, 0, 1, 0)
	filledHeart.BackgroundTransparency = 1
	filledHeart.Image = "http://www.roblox.com/asset/?id=119232510808280" -- Replace with full heart image
	filledHeart.Parent = heartFrame

	-- Create heart image (half)
	local halfHeart = Instance.new("ImageLabel")
	halfHeart.Name = "HalfHeart"
	halfHeart.Size = UDim2.new(1, 0, 1, 0)
	halfHeart.BackgroundTransparency = 1
	halfHeart.Image = "http://www.roblox.com/asset/?id=103530431898201" -- Replace with half heart image
	halfHeart.Visible = false
	halfHeart.Parent = heartFrame

	-- Create heart image (empty)
	local emptyHeart = Instance.new("ImageLabel")
	emptyHeart.Name = "EmptyHeart"
	emptyHeart.Size = UDim2.new(1, 0, 1, 0)
	emptyHeart.BackgroundTransparency = 1
	emptyHeart.Image = "http://www.roblox.com/asset/?id=96920951122696" -- Replace with empty heart image
	emptyHeart.Visible = false
	emptyHeart.Parent = heartFrame

	return heartFrame
end

function HeartSystem:updateHeartDisplay()
	for i, heartFrame in ipairs(self.heartFrames) do
		local filledHeart = heartFrame:FindFirstChild("FilledHeart")
		local halfHeart = heartFrame:FindFirstChild("HalfHeart")
		local emptyHeart = heartFrame:FindFirstChild("EmptyHeart")

		-- Calculate hits remaining for this heart
		local hitsForThisHeart = math.max(0, self.currentHits - ((i - 1) * 2))

		if hitsForThisHeart >= 2 then
			-- Show full heart (2 hits remaining)
			filledHeart.Visible = true
			halfHeart.Visible = false
			emptyHeart.Visible = false
		elseif hitsForThisHeart == 1 then
			-- Show half heart (1 hit remaining)
			filledHeart.Visible = false
			halfHeart.Visible = true
			emptyHeart.Visible = false
		else
			-- Show empty heart (0 hits remaining)
			filledHeart.Visible = false
			halfHeart.Visible = false
			emptyHeart.Visible = true
		end
	end
end

function HeartSystem:setHits(hits)
	hits = math.max(0, math.min(hits, self.maxHearts * 2))

	if hits ~= self.currentHits then
		local oldHits = self.currentHits
		self.currentHits = hits

		-- Animate heart changes
		if hits < oldHits then
			-- Lost hits - animate the affected hearts
			self:animateHeartChange(oldHits, hits)
		else
			-- Gained hits - animate the affected hearts
			self:animateHeartChange(oldHits, hits)
		end

		self:updateHeartDisplay()
	end
end

function HeartSystem:animateHeartChange(oldHits, newHits)
	-- Find which hearts were affected
	local oldHeartIndex = math.ceil(oldHits / 2)
	local newHeartIndex = math.ceil(newHits / 2)

	-- Animate the heart that changed
	local heartIndex = math.max(oldHeartIndex, newHeartIndex)
	if heartIndex > 0 and heartIndex <= self.maxHearts then
		local heartFrame = self.heartFrames[heartIndex]
		if heartFrame then
			-- Create a pulse effect
			local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
			local scaleTween = TweenService:Create(heartFrame, tweenInfo, {
				Size = UDim2.new(0, HEART_SIZE.X.Offset * 1.2, 0, HEART_SIZE.Y.Offset * 1.2)
			})
			scaleTween:Play()

			scaleTween.Completed:Connect(function()
				local scaleBackTween = TweenService:Create(heartFrame, tweenInfo, {
					Size = HEART_SIZE
				})
				scaleBackTween:Play()
			end)
		end
	end
end

-- ========================================================================
-- CHARACTER INTEGRATION (UPDATED)
-- ========================================================================

function HeartSystem:connectHealthEvents()
	-- Wait for character to spawn
	local function onCharacterAdded(character)
		local humanoid = character:WaitForChild("Humanoid")

		-- Set custom max health (each hit = 5 health, each heart = 10 health)
		humanoid.MaxHealth = self.maxHearts * 10

		-- Wait and set health
		task.wait(0.1)
		humanoid.Health = humanoid.MaxHealth

		-- Don't reset hearts here - let server handle it
		self:updateHeartDisplay()

		print("Character respawned - Health set to:", humanoid.Health, "Hearts:", self.currentHits)

		-- Connect to health changes
		humanoid.HealthChanged:Connect(function(health)
			-- Only update if this is from spike damage (not item changes)
			local maxHealth = humanoid.MaxHealth
			local healthPercentage = health / maxHealth
			local maxHits = self.maxHearts * 2

			-- Calculate hits based on health percentage
			local hits = math.ceil(healthPercentage * maxHits)
			hits = math.max(0, math.min(hits, maxHits))

			self:setHits(hits)
			print("Health changed to:", health, "Health %:", math.floor(healthPercentage * 100), "Hits calculated:", hits)
		end)

		-- Handle death
		humanoid.Died:Connect(function()
			self:setHits(0)
			self.isInvincible = false
			print("Player died - Hearts set to 0")
		end)
	end

	-- Connect to character spawning
	if player.Character then
		onCharacterAdded(player.Character)
	end
	player.CharacterAdded:Connect(onCharacterAdded)
end

-- ========================================================================
-- DAMAGE FUNCTIONS (PRESERVED)
-- ========================================================================

function HeartSystem:takeDamage(hits)
	-- Check if player is invincible
	if self.isInvincible then
		print("Player is invincible - damage ignored")
		return false
	end

	hits = hits or 1
	local newHits = math.max(0, self.currentHits - hits)
	self:setHits(newHits)

	-- Start i-frames
	self:startIFrames()

	-- Update character health
	if player.Character and player.Character:FindFirstChild("Humanoid") then
		local humanoid = player.Character.Humanoid
		humanoid.Health = math.max(humanoid.Health - (hits * 5), 0)
	end

	return true
end

function HeartSystem:heal(hits)
	hits = hits or 1
	local newHits = math.min(self.maxHearts * 2, self.currentHits + hits)
	self:setHits(newHits)

	-- Update character health
	if player.Character and player.Character:FindFirstChild("Humanoid") then
		local humanoid = player.Character.Humanoid
		humanoid.Health = math.min(humanoid.Health + (hits * 5), humanoid.MaxHealth)
	end
end

function HeartSystem:addFullHeart()
	self:heal(2)
end

function HeartSystem:removeFullHeart()
	self:takeDamage(2)
end

-- ========================================================================
-- I-FRAMES SYSTEM (PRESERVED)
-- ========================================================================

function HeartSystem:startIFrames()
	if self.isInvincible then return end

	self.isInvincible = true
	print("I-frames started for", self.iframeTime, "seconds")

	self:startFlashing()

	spawn(function()
		task.wait(self.iframeTime)
		self.isInvincible = false
		self:stopFlashing()
		print("I-frames ended")
	end)
end

function HeartSystem:startFlashing()
	spawn(function()
		while self.isInvincible do
			for _, heartFrame in pairs(self.heartFrames) do
				for _, child in pairs(heartFrame:GetChildren()) do
					if child:IsA("ImageLabel") then
						local tween = TweenService:Create(child, 
							TweenInfo.new(self.iframeFlashSpeed, Enum.EasingStyle.Linear), 
							{ImageTransparency = 0.7}
						)
						tween:Play()
					end
				end
			end

			task.wait(self.iframeFlashSpeed)

			for _, heartFrame in pairs(self.heartFrames) do
				for _, child in pairs(heartFrame:GetChildren()) do
					if child:IsA("ImageLabel") then
						local tween = TweenService:Create(child, 
							TweenInfo.new(self.iframeFlashSpeed, Enum.EasingStyle.Linear), 
							{ImageTransparency = 0}
						)
						tween:Play()
					end
				end
			end

			task.wait(self.iframeFlashSpeed)
		end
	end)
end

function HeartSystem:stopFlashing()
	for _, heartFrame in pairs(self.heartFrames) do
		for _, child in pairs(heartFrame:GetChildren()) do
			if child:IsA("ImageLabel") then
				child.ImageTransparency = 0
			end
		end
	end
end

-- ========================================================================
-- INITIALIZATION
-- ========================================================================

-- Create the heart system
local heartSystem = HeartSystem.new()

-- Make it globally accessible
_G.HeartSystem = heartSystem

-- Handle spike damage (preserved)
spikeHeartDamageEvent.OnClientEvent:Connect(function(hits)
	if heartSystem then
		heartSystem:takeDamage(hits)
		print("Received spike damage:", hits, "hits")
	end
end)

-- Test controls (preserved)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.H then
		heartSystem:heal(1)
		print("Healed 1 hit - Current hits: " .. heartSystem.currentHits)
	elseif input.KeyCode == Enum.KeyCode.J then
		heartSystem:takeDamage(1)
		print("Took 1 hit - Current hits: " .. heartSystem.currentHits)
	elseif input.KeyCode == Enum.KeyCode.K then
		heartSystem:addFullHeart()
		print("Healed full heart - Current hits: " .. heartSystem.currentHits)
	elseif input.KeyCode == Enum.KeyCode.L then
		heartSystem:removeFullHeart()
		print("Lost full heart - Current hits: " .. heartSystem.currentHits)
	end
end)

print("✅ Fixed Heart System with Item Integration loaded!")
print("💖 Features:")
print("  ✅ Dynamic heart UI that grows/shrinks")
print("  ✅ Integration with ItemEffects system")
print("  ✅ Animated heart gaining")
print("  ✅ Server-authoritative health updates")
print("  ✅ Half-heart support")
print("  ✅ All original functionality preserved")
