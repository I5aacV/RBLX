-- ========================================================================
-- FIXED DOOR INTERACTION CLIENT SCRIPT
-- Place this as a LocalScript in StarterPlayerScripts
-- Compatible with the Fixed SharedDoorManager system
-- ========================================================================

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CollectionService = game:GetService("CollectionService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer

-- Door interaction settings (matching server config)
local DOOR_DETECTION_DISTANCE = 8
local DOOR_HOLD_TIME = 1.5

-- Current interaction state
local currentDoor = nil
local isHoldingE = false
local holdStartTime = 0
local heartbeatConnection = nil

-- Remote events (will be found once they exist)
local unlockDoorRemote = nil
local doorProgressRemote = nil

-- Track current character
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- ========================================================================
-- REMOTE EVENT SETUP
-- ========================================================================

-- Update progress bar during E key hold
local function updateProgress(door, progress)
	local gui = door:FindFirstChild("DoorUI")
	if gui then
		local progressBG = gui:FindFirstChild("ProgressBG")
		if progressBG then
			local progressBar = progressBG:FindFirstChild("ProgressBar")
			if progressBar then
				-- Update size
				progressBar.Size = UDim2.new(progress, 0, 1, 0)

				-- Color change based on progress
				if progress < 0.3 then
					progressBar.BackgroundColor3 = Color3.new(1, 0, 0) -- Red
				elseif progress < 0.7 then
					progressBar.BackgroundColor3 = Color3.new(1, 1, 0) -- Yellow
				else
					progressBar.BackgroundColor3 = Color3.new(0, 1, 0) -- Green
				end
			end
		end
	end
end

-- Wait for and connect to remote events
local function setupRemoteEvents()
	-- Wait for the remote events to be created by the server
	local remotes = ReplicatedStorage:WaitForChild("DoorRemotes", 10)
	if not remotes then
		warn("‚ùå DoorRemotes folder not found! Make sure the Door Connection script is running.")
		return false
	end

	unlockDoorRemote = remotes:WaitForChild("UnlockDoor", 5)
	doorProgressRemote = remotes:WaitForChild("DoorProgress", 5)

	if not unlockDoorRemote or not doorProgressRemote then
		warn("‚ùå Door RemoteEvents not found!")
		return false
	end

	-- Listen for progress updates from server
	doorProgressRemote.OnClientEvent:Connect(function(doorName, progress)
		local door = workspace:FindFirstChild("SharedDoors")
		if door then
			door = door:FindFirstChild(doorName)
		end
		if door then
			updateProgress(door, progress)
		end
	end)

	print("‚úÖ Connected to door RemoteEvents")
	return true
end

-- ========================================================================
-- CHARACTER MANAGEMENT
-- ========================================================================

-- Update character when respawning
local function updateCharacter(newCharacter)
	character = newCharacter
	if character then
		humanoidRootPart = character:WaitForChild("HumanoidRootPart")

		-- Reset interaction state
		currentDoor = nil
		isHoldingE = false
		holdStartTime = 0

		print("üîÑ Character updated for door interaction")
	end
end

player.CharacterAdded:Connect(updateCharacter)

-- ========================================================================
-- DOOR DETECTION AND UI MANAGEMENT
-- ========================================================================

-- Find the closest interactable door
local function findNearestDoor()
	if not humanoidRootPart or not humanoidRootPart.Parent then return nil end

	local playerPosition = humanoidRootPart.Position
	local doors = CollectionService:GetTagged("SharedDoor")
	local closestDoor = nil
	local closestDistance = DOOR_DETECTION_DISTANCE

	for _, door in pairs(doors) do
		if door and door.Parent then
			local doorState = door:GetAttribute("State")

			-- Only interact with CLOSED doors (brown ones)
			if doorState == "closed" then
				local distance = (door.Position - playerPosition).Magnitude
				if distance <= closestDistance then
					closestDistance = distance
					closestDoor = door
				end
			end
		end
	end

	return closestDoor
end

-- Show door UI for nearby door
local function showDoorUI(door)
	local gui = door:FindFirstChild("DoorUI")
	if gui then
		gui.Enabled = true

		-- Reset progress bar
		local progressBG = gui:FindFirstChild("ProgressBG")
		if progressBG then
			local progressBar = progressBG:FindFirstChild("ProgressBar")
			if progressBar then
				progressBar.Size = UDim2.new(0, 0, 1, 0)
				progressBar.BackgroundColor3 = Color3.new(1, 0, 0) -- Start red
			end
		end
	end
end

-- Hide door UI
local function hideDoorUI(door)
	local gui = door:FindFirstChild("DoorUI")
	if gui then
		gui.Enabled = false
	end
end

-- Hide all door UIs
local function hideAllDoorUIs()
	local doors = CollectionService:GetTagged("SharedDoor")
	for _, door in pairs(doors) do
		hideDoorUI(door)
	end
end

-- ========================================================================
-- DOOR INTERACTION LOGIC
-- ========================================================================

-- Send unlock request to server
local function requestDoorUnlock(door, holdTime)
	if unlockDoorRemote and door then
		unlockDoorRemote:FireServer(door.Name, holdTime)
		print("üö™ Requested door unlock:", door.Name, "hold time:", holdTime)
	else
		warn("‚ùå Cannot request door unlock - RemoteEvent not available")
	end
end

-- Send progress update to server
local function sendProgressUpdate(door, progress)
	if doorProgressRemote and door then
		doorProgressRemote:FireServer(door.Name, progress)
	end
end

-- Start door interaction
local function startDoorInteraction(door)
	if isHoldingE or not door then return end

	currentDoor = door
	isHoldingE = true
	holdStartTime = tick()

	print("üîÑ Started unlocking door:", door.Name)

	-- Show immediate feedback
	showDoorUI(door)
	updateProgress(door, 0)
end

-- Stop door interaction
local function stopDoorInteraction()
	if not isHoldingE then return end

	print("‚ùå Cancelled door unlock")
	isHoldingE = false

	if currentDoor then
		updateProgress(currentDoor, 0)
		sendProgressUpdate(currentDoor, 0)
		currentDoor = nil
	end
end

-- Update ongoing door interaction
local function updateDoorInteraction()
	if not isHoldingE or not currentDoor then return end

	local elapsed = tick() - holdStartTime
	local progress = math.min(elapsed / DOOR_HOLD_TIME, 1)

	-- Update local progress immediately for responsiveness
	updateProgress(currentDoor, progress)

	-- Send progress to server for synchronization
	sendProgressUpdate(currentDoor, progress)

	-- Complete unlock when progress reaches 100%
	if progress >= 1 then
		requestDoorUnlock(currentDoor, elapsed)
		isHoldingE = false
		currentDoor = nil
	end
end

-- ========================================================================
-- INPUT HANDLING
-- ========================================================================

-- Handle E key press
local function onInputBegan(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.E then
		local nearbyDoor = findNearestDoor()
		if nearbyDoor and not isHoldingE then
			startDoorInteraction(nearbyDoor)
		end
	end
end

-- Handle E key release
local function onInputEnded(input, gameProcessed)
	if input.KeyCode == Enum.KeyCode.E and isHoldingE then
		stopDoorInteraction()
	end
end

-- ========================================================================
-- MAIN UPDATE LOOP
-- ========================================================================

-- Main update loop for door system
local function updateDoorSystem()
	-- Update ongoing interactions
	updateDoorInteraction()

	-- Handle door UI visibility when not interacting
	if not isHoldingE then
		local nearbyDoor = findNearestDoor()

		-- Show UI for nearby door
		if nearbyDoor then
			showDoorUI(nearbyDoor)
		else
			-- Hide all UIs if no nearby doors
			hideAllDoorUIs()
		end

		-- Hide UI for doors that are no longer nearby
		local allDoors = CollectionService:GetTagged("SharedDoor")
		for _, door in pairs(allDoors) do
			if door ~= nearbyDoor then
				hideDoorUI(door)
			end
		end
	end
end

-- ========================================================================
-- SYSTEM INITIALIZATION
-- ========================================================================

-- Start the door interaction system
local function startDoorSystem()
	print("üöÄ Starting door interaction system...")

	-- Setup remote events first
	if not setupRemoteEvents() then
		warn("‚ùå Failed to setup remote events - door system may not work properly")
		return false
	end

	-- Clean up existing connections
	if heartbeatConnection then
		heartbeatConnection:Disconnect()
	end

	-- Connect input handlers
	UserInputService.InputBegan:Connect(onInputBegan)
	UserInputService.InputEnded:Connect(onInputEnded)

	-- Connect update loop
	heartbeatConnection = RunService.Heartbeat:Connect(updateDoorSystem)

	print("‚úÖ Door interaction system started successfully!")
	return true
end

-- ========================================================================
-- ERROR HANDLING AND RETRY LOGIC
-- ========================================================================

-- Retry connection if it fails initially
local function retryConnection()
	local maxRetries = 5
	local retryDelay = 2

	for attempt = 1, maxRetries do
		print("üîÑ Attempting to start door system (attempt " .. attempt .. "/" .. maxRetries .. ")")

		if startDoorSystem() then
			print("‚úÖ Door system started successfully on attempt", attempt)
			return true
		end

		if attempt < maxRetries then
			print("‚è≥ Retrying in", retryDelay, "seconds...")
			task.wait(retryDelay)
		end
	end

	warn("‚ùå Failed to start door system after", maxRetries, "attempts")
	return false
end

-- ========================================================================
-- CLEANUP AND INITIALIZATION
-- ========================================================================

-- Cleanup when player leaves
game.Players.PlayerRemoving:Connect(function(leavingPlayer)
	if leavingPlayer == player then
		if heartbeatConnection then
			heartbeatConnection:Disconnect()
		end
		hideAllDoorUIs()
	end
end)

-- Wait a moment for server script to initialize, then start
task.wait(2)
retryConnection()

print("üö™ Fixed Door Interaction Client Script Loaded!")
print("üìã Features:")
print("  ‚úÖ Secure RemoteEvent communication")
print("  ‚úÖ Automatic retry on connection failure")
print("  ‚úÖ Real-time progress feedback")
print("  ‚úÖ Smart door detection (CLOSED doors only)")
print("  ‚úÖ Character respawn handling")
print("  ‚úÖ Smooth UI transitions")
print("üí° Usage:")
print("  - Walk near brown (closed) doors")
print("  - Hold E to unlock them")
print("  - Gray (locked) doors cannot be opened")
print("  - Transparent (unlocked) doors are walkable")

--[[
üîß MAIN FIXES:
1. ‚úÖ Uses RemoteEvents for secure client-server communication
2. ‚úÖ Waits for server script to initialize before connecting
3. ‚úÖ Automatic retry logic if connection fails
4. ‚úÖ Real-time progress synchronization
5. ‚úÖ Better error handling and logging
6. ‚úÖ Cleaner UI management
7. ‚úÖ Only interacts with CLOSED (brown) doors
8. ‚úÖ Character respawn handling

üéÆ HOW IT WORKS:
- Client detects E key input and nearby doors
- Sends unlock requests via RemoteEvents to server
- Server validates and processes unlock requests
- Progress is synchronized between client and server
- UI updates happen immediately for responsiveness

üîó INTEGRATION:
- Works with the Fixed Door Connection Script
- Requires RemoteEvents to be created by server
- Automatically retries connection if server isn't ready
--]]
