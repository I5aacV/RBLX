-- ========================================================================
-- ISOMETRIC MOVEMENT SYSTEM WITH ITEMEFFECTS INTEGRATION
-- Replaces your IsometricMovement script
-- ========================================================================

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer

-- ========================================================================
-- CONFIGURATION
-- ========================================================================

local BASE_MOVE_SPEED = 16    -- Base movement speed (will be modified by ItemEffects)
local SMOOTH_FACTOR = 0.8     -- How smooth movement feels (0-1)

-- Current player stats (updated by ItemEffects)
local playerMovementStats = {
	speed = BASE_MOVE_SPEED,
	canFly = false
}

-- Sprinting configuration
local SPRINT_MULTIPLIER = 1.5   -- How much faster sprinting is
local isSprinting = false

-- Input tracking
local inputState = {
	up = false,      -- W key
	down = false,    -- S key  
	left = false,    -- A key
	right = false,   -- D key
	sprint = false   -- Left Shift key
}

-- Movement state
local moveDirection = Vector3.new(0, 0, 0)
local bodyVelocity = nil

-- ========================================================================
-- ITEMEFFECTS INTEGRATION
-- ========================================================================

-- Listen for stats updates from ItemEffects system
local statsUpdateEvent = ReplicatedStorage:FindFirstChild("UpdatePlayerStats")
if statsUpdateEvent then
	statsUpdateEvent.OnClientEvent:Connect(function(newStats)
		if not newStats then return end

		-- Update movement speed from ItemEffects
		local baseSpeed = BASE_MOVE_SPEED
		local speedMultiplier = newStats.speed or 16 -- ItemEffects uses 16 as base

		-- Convert ItemEffects speed to our movement speed
		-- ItemEffects speed goes: 16 (normal), higher = faster
		playerMovementStats.speed = speedMultiplier
		playerMovementStats.canFly = newStats.canFly or false

		print("üèÉ Movement speed updated:", playerMovementStats.speed, "(from ItemEffects)")
		if playerMovementStats.canFly then
			print("‚úàÔ∏è Flight enabled!")
		end
	end)
end

-- ========================================================================
-- MOVEMENT FUNCTIONS
-- ========================================================================

-- Calculate movement direction for isometric view
local function updateMovementDirection()
	local x = 0
	local z = 0

	-- Get raw input
	if inputState.up then z = z - 1 end      -- W 
	if inputState.down then z = z + 1 end    -- S 
	if inputState.left then x = x - 1 end    -- A 
	if inputState.right then x = x + 1 end   -- D 

	-- Transform to match the isometric camera view
	if x ~= 0 or z ~= 0 then
		-- For camera at (zoom, zoom, zoom), this transformation works:
		local newX = (x + z) * 0.707  -- Diagonal movement
		local newZ = (z - x) * 0.707  -- Diagonal movement

		moveDirection = Vector3.new(newX, 0, newZ).Unit
	else
		moveDirection = Vector3.new(0, 0, 0)
	end
end

-- Apply movement to character
local function applyMovement()
	local character = player.Character
	if not character or not character:FindFirstChild("HumanoidRootPart") then
		return
	end

	local humanoidRootPart = character.HumanoidRootPart
	local humanoid = character:FindFirstChild("Humanoid")

	if not humanoid then return end

	-- Create or update BodyVelocity for smooth movement
	if not bodyVelocity then
		bodyVelocity = Instance.new("BodyVelocity")
		bodyVelocity.MaxForce = Vector3.new(4000, 0, 4000)  -- Only apply force on X and Z
		bodyVelocity.Parent = humanoidRootPart
	end

	-- Calculate current speed with sprinting
	local currentSpeed = playerMovementStats.speed
	if inputState.sprint and moveDirection.Magnitude > 0 and not playerMovementStats.canFly then
		currentSpeed = currentSpeed * SPRINT_MULTIPLIER
		isSprinting = true
	else
		isSprinting = false
	end

	-- Calculate target velocity using ItemEffects speed with sprint modifier
	local targetVelocity = moveDirection * currentSpeed

	-- Smooth movement interpolation
	local currentVelocity = bodyVelocity.Velocity
	local newVelocity = currentVelocity:Lerp(targetVelocity, SMOOTH_FACTOR)

	-- Apply movement (preserve Y velocity for gravity/jumping)
	bodyVelocity.Velocity = Vector3.new(newVelocity.X, currentVelocity.Y, newVelocity.Z)

	-- Update humanoid WalkSpeed to match for animations
	-- (ItemEffects will override this, but we set it as a base)
	if moveDirection.Magnitude > 0 then
		humanoid.WalkSpeed = currentSpeed
	else
		humanoid.WalkSpeed = 0
	end

	-- Handle flight if enabled by items
	if playerMovementStats.canFly then
		-- Allow Y movement when flying
		bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)

		-- Flight controls: Space = up, Ctrl = down (since Shift is now sprint)
		local yInput = 0
		if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
			yInput = yInput + 1
		end
		if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
			yInput = yInput - 1
		end

		-- Apply vertical movement for flight (no sprinting while flying)
		bodyVelocity.Velocity = Vector3.new(newVelocity.X, yInput * playerMovementStats.speed * 0.8, newVelocity.Z)
	else
		-- Normal ground movement
		bodyVelocity.MaxForce = Vector3.new(4000, 0, 4000)
	end
end

-- Clean up BodyVelocity when character is removed
local function cleanupMovement()
	if bodyVelocity then
		bodyVelocity:Destroy()
		bodyVelocity = nil
	end
end

-- ========================================================================
-- INPUT HANDLING
-- ========================================================================

-- Handle key press
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.W then
		inputState.up = true
		updateMovementDirection()
	elseif input.KeyCode == Enum.KeyCode.S then
		inputState.down = true
		updateMovementDirection()
	elseif input.KeyCode == Enum.KeyCode.A then
		inputState.left = true
		updateMovementDirection()
	elseif input.KeyCode == Enum.KeyCode.D then
		inputState.right = true
		updateMovementDirection()
	elseif input.KeyCode == Enum.KeyCode.LeftShift then
		inputState.sprint = true
		if isSprinting then
			print("üèÉüí® SPRINTING at", string.format("%.1f", playerMovementStats.speed * SPRINT_MULTIPLIER), "speed!")
		end
	end
end)

-- Handle key release
UserInputService.InputEnded:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.W then
		inputState.up = false
		updateMovementDirection()
	elseif input.KeyCode == Enum.KeyCode.S then
		inputState.down = false
		updateMovementDirection()
	elseif input.KeyCode == Enum.KeyCode.A then
		inputState.left = false
		updateMovementDirection()
	elseif input.KeyCode == Enum.KeyCode.D then
		inputState.right = false
		updateMovementDirection()
	elseif input.KeyCode == Enum.KeyCode.LeftShift then
		inputState.sprint = false
		if not isSprinting then
			print("üö∂ Stopped sprinting")
		end
	end
end)

-- ========================================================================
-- CHARACTER SETUP
-- ========================================================================

local function onCharacterAdded(character)
	print("üë§ CHARACTER SPAWNED - Setting up isometric movement...")

	-- Wait for character to load
	local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
	local humanoid = character:WaitForChild("Humanoid")

	-- Configure humanoid for custom movement
	humanoid.PlatformStand = false
	humanoid.WalkSpeed = playerMovementStats.speed -- Set initial speed
	-- Don't disable jumping - let Roblox handle it

	-- Clean up any existing movement
	cleanupMovement()

	print("‚úÖ Isometric movement system ready with ItemEffects integration!")
	print("üèÉ Current speed:", playerMovementStats.speed)
end

-- Handle character removal
local function onCharacterRemoving()
	cleanupMovement()
end

-- ========================================================================
-- INITIALIZATION
-- ========================================================================

-- Connect to character events
if player.Character then
	onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)
player.CharacterRemoving:Connect(onCharacterRemoving)

-- Start movement update loop
RunService.Heartbeat:Connect(applyMovement)

print("‚úÖ ItemEffects-Integrated Isometric Movement System loaded!")
print("üéÆ CONTROLS:")
print("  WASD - Move in isometric directions")
print("  Left Shift - Sprint (1.5x speed, ground only)")
print("  Space/Left Ctrl - Up/Down when flying")
print("  üìê Movement properly rotated for isometric camera")
print("  üèÉ Speed controlled by ItemEffects system")
print("  üí® Sprinting multiplies speed by", SPRINT_MULTIPLIER .. "x")
print("  ‚úàÔ∏è Flight enabled by items like Dead Sea Scrolls")
print("  ‚ö° Base Speed:", BASE_MOVE_SPEED, "studs/second")
